CCS PCM C Compiler, Version 5.008, 5967               14-abr.-21 14:15

               Filename:   C:\Users\Ignacio\OneDrive\Documentos\002_CAF\cafProyect01\PIC_16F628A_I-P\proyectoDisplay.lst

               ROM used:   826 words (40%)
                           Largest free fragment is 1222
               RAM used:   6 (3%) at main() level
                           16 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   229
0003:  NOP
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  0C
0011:  RETLW  00
0012:  BCF    0A.0
0013:  BCF    0A.1
0014:  BCF    0A.2
0015:  ADDWF  02,F
0016:  RETLW  45
0017:  RETLW  73
0018:  RETLW  70
0019:  RETLW  65
001A:  RETLW  72
001B:  RETLW  61
001C:  RETLW  6E
001D:  RETLW  64
001E:  RETLW  6F
001F:  RETLW  20
0020:  RETLW  45
0021:  RETLW  52
0022:  RETLW  52
0023:  RETLW  4F
0024:  RETLW  52
0025:  RETLW  00
0026:  BCF    0A.0
0027:  BCF    0A.1
0028:  BCF    0A.2
0029:  ADDWF  02,F
002A:  RETLW  52
002B:  RETLW  65
002C:  RETLW  67
002D:  RETLW  69
002E:  RETLW  73
002F:  RETLW  74
0030:  RETLW  72
0031:  RETLW  61
0032:  RETLW  64
0033:  RETLW  6F
0034:  RETLW  72
0035:  RETLW  20
0036:  RETLW  64
0037:  RETLW  65
0038:  RETLW  20
0039:  RETLW  45
003A:  RETLW  76
003B:  RETLW  65
003C:  RETLW  6E
003D:  RETLW  74
003E:  RETLW  6F
003F:  RETLW  73
0040:  RETLW  00
0041:  BCF    0A.0
0042:  BCF    0A.1
0043:  BCF    0A.2
0044:  ADDWF  02,F
0045:  RETLW  45
0046:  RETLW  72
0047:  RETLW  72
0048:  RETLW  6F
0049:  RETLW  72
004A:  RETLW  20
004B:  RETLW  65
004C:  RETLW  6E
004D:  RETLW  3A
004E:  RETLW  00
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  45
0054:  RETLW  52
0055:  RETLW  52
0056:  RETLW  4F
0057:  RETLW  52
0058:  RETLW  5F
0059:  RETLW  30
005A:  RETLW  31
005B:  RETLW  31
005C:  RETLW  3A
005D:  RETLW  20
005E:  RETLW  6C
005F:  RETLW  61
0060:  RETLW  20
0061:  RETLW  76
0062:  RETLW  61
0063:  RETLW  72
0064:  RETLW  69
0065:  RETLW  61
0066:  RETLW  62
0067:  RETLW  6C
0068:  RETLW  65
0069:  RETLW  20
006A:  RETLW  58
006B:  RETLW  31
006C:  RETLW  5F
006D:  RETLW  56
006E:  RETLW  54
006F:  RETLW  5F
0070:  RETLW  30
0071:  RETLW  35
0072:  RETLW  00
0073:  BCF    0A.0
0074:  BCF    0A.1
0075:  BCF    0A.2
0076:  ADDWF  02,F
0077:  RETLW  45
0078:  RETLW  52
0079:  RETLW  52
007A:  RETLW  4F
007B:  RETLW  52
007C:  RETLW  5F
007D:  RETLW  30
007E:  RETLW  32
007F:  RETLW  31
0080:  RETLW  3A
0081:  RETLW  20
0082:  RETLW  6C
0083:  RETLW  61
0084:  RETLW  20
0085:  RETLW  76
0086:  RETLW  61
0087:  RETLW  72
0088:  RETLW  69
0089:  RETLW  61
008A:  RETLW  62
008B:  RETLW  6C
008C:  RETLW  65
008D:  RETLW  20
008E:  RETLW  58
008F:  RETLW  37
0090:  RETLW  5F
0091:  RETLW  56
0092:  RETLW  54
0093:  RETLW  5F
0094:  RETLW  30
0095:  RETLW  35
0096:  RETLW  00
0097:  BCF    0A.0
0098:  BCF    0A.1
0099:  BCF    0A.2
009A:  ADDWF  02,F
009B:  RETLW  45
009C:  RETLW  72
009D:  RETLW  72
009E:  RETLW  6F
009F:  RETLW  72
00A0:  RETLW  20
00A1:  RETLW  65
00A2:  RETLW  6E
00A3:  RETLW  3A
00A4:  RETLW  0A
00A5:  RETLW  45
00A6:  RETLW  52
00A7:  RETLW  52
00A8:  RETLW  4F
00A9:  RETLW  52
00AA:  RETLW  5F
00AB:  RETLW  30
00AC:  RETLW  33
00AD:  RETLW  31
00AE:  RETLW  3A
00AF:  RETLW  20
00B0:  RETLW  6C
00B1:  RETLW  61
00B2:  RETLW  20
00B3:  RETLW  76
00B4:  RETLW  61
00B5:  RETLW  72
00B6:  RETLW  69
00B7:  RETLW  61
00B8:  RETLW  62
00B9:  RETLW  6C
00BA:  RETLW  65
00BB:  RETLW  20
00BC:  RETLW  58
00BD:  RETLW  36
00BE:  RETLW  5F
00BF:  RETLW  56
00C0:  RETLW  54
00C1:  RETLW  5F
00C2:  RETLW  30
00C3:  RETLW  35
00C4:  RETLW  00
00C5:  BCF    0A.0
00C6:  BCF    0A.1
00C7:  BCF    0A.2
00C8:  ADDWF  02,F
00C9:  RETLW  0C
00CA:  RETLW  45
00CB:  RETLW  72
00CC:  RETLW  72
00CD:  RETLW  6F
00CE:  RETLW  72
00CF:  RETLW  20
00D0:  RETLW  65
00D1:  RETLW  6E
00D2:  RETLW  3A
00D3:  RETLW  0A
00D4:  RETLW  45
00D5:  RETLW  52
00D6:  RETLW  52
00D7:  RETLW  4F
00D8:  RETLW  52
00D9:  RETLW  5F
00DA:  RETLW  30
00DB:  RETLW  31
00DC:  RETLW  31
00DD:  RETLW  3A
00DE:  RETLW  20
00DF:  RETLW  6C
00E0:  RETLW  61
00E1:  RETLW  20
00E2:  RETLW  76
00E3:  RETLW  61
00E4:  RETLW  72
00E5:  RETLW  69
00E6:  RETLW  61
00E7:  RETLW  62
00E8:  RETLW  6C
00E9:  RETLW  65
00EA:  RETLW  20
00EB:  RETLW  58
00EC:  RETLW  31
00ED:  RETLW  5F
00EE:  RETLW  56
00EF:  RETLW  54
00F0:  RETLW  5F
00F1:  RETLW  36
00F2:  RETLW  00
00F3:  BCF    0A.0
00F4:  BCF    0A.1
00F5:  BCF    0A.2
00F6:  ADDLW  FA
00F7:  BTFSC  03.0
00F8:  INCF   0A,F
00F9:  MOVWF  02
00FA:  RETLW  0C
00FB:  RETLW  45
00FC:  RETLW  72
00FD:  RETLW  72
00FE:  RETLW  6F
00FF:  RETLW  72
0100:  RETLW  20
0101:  RETLW  65
0102:  RETLW  6E
0103:  RETLW  3A
0104:  RETLW  0A
0105:  RETLW  45
0106:  RETLW  52
0107:  RETLW  52
0108:  RETLW  4F
0109:  RETLW  52
010A:  RETLW  5F
010B:  RETLW  30
010C:  RETLW  32
010D:  RETLW  31
010E:  RETLW  3A
010F:  RETLW  20
0110:  RETLW  6C
0111:  RETLW  61
0112:  RETLW  20
0113:  RETLW  76
0114:  RETLW  61
0115:  RETLW  72
0116:  RETLW  69
0117:  RETLW  61
0118:  RETLW  62
0119:  RETLW  6C
011A:  RETLW  65
011B:  RETLW  20
011C:  RETLW  58
011D:  RETLW  37
011E:  RETLW  5F
011F:  RETLW  56
0120:  RETLW  54
0121:  RETLW  5F
0122:  RETLW  36
0123:  RETLW  00
0124:  BSF    0A.0
0125:  BCF    0A.1
0126:  BCF    0A.2
0127:  ADDWF  02,F
0128:  RETLW  0C
0129:  RETLW  45
012A:  RETLW  72
012B:  RETLW  72
012C:  RETLW  6F
012D:  RETLW  72
012E:  RETLW  20
012F:  RETLW  65
0130:  RETLW  6E
0131:  RETLW  3A
0132:  RETLW  0A
0133:  RETLW  0C
0134:  RETLW  45
0135:  RETLW  52
0136:  RETLW  52
0137:  RETLW  4F
0138:  RETLW  52
0139:  RETLW  5F
013A:  RETLW  30
013B:  RETLW  33
013C:  RETLW  31
013D:  RETLW  3A
013E:  RETLW  20
013F:  RETLW  6C
0140:  RETLW  61
0141:  RETLW  20
0142:  RETLW  76
0143:  RETLW  61
0144:  RETLW  72
0145:  RETLW  69
0146:  RETLW  61
0147:  RETLW  62
0148:  RETLW  6C
0149:  RETLW  65
014A:  RETLW  20
014B:  RETLW  58
014C:  RETLW  36
014D:  RETLW  5F
014E:  RETLW  56
014F:  RETLW  54
0150:  RETLW  5F
0151:  RETLW  36
0152:  RETLW  00
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT 
.................... #use delay(clock = 4000000) 
0153:  MOVLW  23
0154:  MOVWF  04
0155:  BCF    03.7
0156:  MOVF   00,W
0157:  BTFSC  03.2
0158:  GOTO   167
0159:  MOVLW  01
015A:  MOVWF  78
015B:  CLRF   77
015C:  DECFSZ 77,F
015D:  GOTO   15C
015E:  DECFSZ 78,F
015F:  GOTO   15B
0160:  MOVLW  4A
0161:  MOVWF  77
0162:  DECFSZ 77,F
0163:  GOTO   162
0164:  GOTO   165
0165:  DECFSZ 00,F
0166:  GOTO   159
0167:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0180:  MOVLW  0F
0181:  BSF    03.5
0182:  ANDWF  06,W
0183:  IORLW  F0
0184:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0185:  BCF    03.5
0186:  BSF    06.2
....................    delay_cycles(1); 
0187:  NOP
....................    lcd_output_enable(1); 
0188:  BSF    06.0
....................    delay_cycles(1); 
0189:  NOP
....................    high = lcd_read_nibble(); 
018A:  CALL   174
018B:  MOVF   78,W
018C:  MOVWF  2A
....................        
....................    lcd_output_enable(0); 
018D:  BCF    06.0
....................    delay_cycles(1); 
018E:  NOP
....................    lcd_output_enable(1); 
018F:  BSF    06.0
....................    delay_us(1); 
0190:  NOP
....................    low = lcd_read_nibble(); 
0191:  CALL   174
0192:  MOVF   78,W
0193:  MOVWF  29
....................        
....................    lcd_output_enable(0); 
0194:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0195:  MOVLW  0F
0196:  BSF    03.5
0197:  ANDWF  06,W
0198:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0199:  BCF    03.5
019A:  SWAPF  2A,W
019B:  MOVWF  77
019C:  MOVLW  F0
019D:  ANDWF  77,F
019E:  MOVF   77,W
019F:  IORWF  29,W
01A0:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0174:  MOVF   06,W
0175:  MOVWF  77
0176:  SWAPF  06,W
0177:  ANDLW  0F
0178:  MOVWF  78
....................   #endif 
0179:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0168:  SWAPF  2A,W
0169:  ANDLW  F0
016A:  MOVWF  77
016B:  MOVLW  0F
016C:  ANDWF  06,W
016D:  IORWF  77,W
016E:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
016F:  NOP
....................    lcd_output_enable(1); 
0170:  BSF    06.0
....................    delay_us(2); 
0171:  GOTO   172
....................    lcd_output_enable(0); 
0172:  BCF    06.0
0173:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
017A:  BSF    03.5
017B:  BCF    06.0
....................    lcd_rs_tris(); 
017C:  BCF    06.1
....................    lcd_rw_tris(); 
017D:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
017E:  BCF    03.5
017F:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
01A1:  MOVF   78,W
01A2:  MOVWF  29
01A3:  BTFSC  29.7
01A4:  GOTO   180
....................    lcd_output_rs(address); 
01A5:  BTFSS  27.0
01A6:  BCF    06.1
01A7:  BTFSC  27.0
01A8:  BSF    06.1
....................    delay_cycles(1); 
01A9:  NOP
....................    lcd_output_rw(0); 
01AA:  BCF    06.2
....................    delay_cycles(1); 
01AB:  NOP
....................    lcd_output_enable(0); 
01AC:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
01AD:  SWAPF  28,W
01AE:  MOVWF  29
01AF:  MOVLW  0F
01B0:  ANDWF  29,F
01B1:  MOVF   29,W
01B2:  MOVWF  2A
01B3:  CALL   168
....................    lcd_send_nibble(n & 0xf); 
01B4:  MOVF   28,W
01B5:  ANDLW  0F
01B6:  MOVWF  29
01B7:  MOVWF  2A
01B8:  CALL   168
01B9:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01BA:  MOVLW  0F
01BB:  BSF    03.5
01BC:  ANDWF  06,W
01BD:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
01BE:  BCF    06.0
....................    lcd_rs_tris(); 
01BF:  BCF    06.1
....................    lcd_rw_tris(); 
01C0:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
01C1:  BCF    03.5
01C2:  BCF    06.1
....................    lcd_output_rw(0); 
01C3:  BCF    06.2
....................    lcd_output_enable(0); 
01C4:  BCF    06.0
....................      
....................    delay_ms(15); 
01C5:  MOVLW  0F
01C6:  MOVWF  23
01C7:  CALL   153
....................    for(i=1;i<=3;++i) 
01C8:  MOVLW  01
01C9:  MOVWF  21
01CA:  MOVF   21,W
01CB:  SUBLW  03
01CC:  BTFSS  03.0
01CD:  GOTO   1D6
....................    { 
....................        lcd_send_nibble(3); 
01CE:  MOVLW  03
01CF:  MOVWF  2A
01D0:  CALL   168
....................        delay_ms(5); 
01D1:  MOVLW  05
01D2:  MOVWF  23
01D3:  CALL   153
01D4:  INCF   21,F
01D5:  GOTO   1CA
....................    } 
....................     
....................    lcd_send_nibble(2); 
01D6:  MOVLW  02
01D7:  MOVWF  2A
01D8:  CALL   168
....................    delay_ms(5); 
01D9:  MOVLW  05
01DA:  MOVWF  23
01DB:  CALL   153
....................    for(i=0;i<=3;++i) 
01DC:  CLRF   21
01DD:  MOVF   21,W
01DE:  SUBLW  03
01DF:  BTFSS  03.0
01E0:  GOTO   1EA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01E1:  MOVF   21,W
01E2:  CALL   004
01E3:  MOVWF  22
01E4:  CLRF   27
01E5:  MOVF   22,W
01E6:  MOVWF  28
01E7:  CALL   17A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01E8:  INCF   21,F
01E9:  GOTO   1DD
01EA:  GOTO   230 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
01EB:  DECFSZ 24,W
01EC:  GOTO   1EE
01ED:  GOTO   1F1
....................       address=LCD_LINE_TWO; 
01EE:  MOVLW  40
01EF:  MOVWF  25
01F0:  GOTO   1F2
....................    else 
....................       address=0; 
01F1:  CLRF   25
....................       
....................    address+=x-1; 
01F2:  MOVLW  01
01F3:  SUBWF  23,W
01F4:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address); 
01F5:  MOVF   25,W
01F6:  IORLW  80
01F7:  MOVWF  26
01F8:  CLRF   27
01F9:  MOVF   26,W
01FA:  MOVWF  28
01FB:  CALL   17A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01FC:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01FD:  MOVF   22,W
01FE:  XORLW  07
01FF:  BTFSC  03.2
0200:  GOTO   20B
0201:  XORLW  0B
0202:  BTFSC  03.2
0203:  GOTO   210
0204:  XORLW  06
0205:  BTFSC  03.2
0206:  GOTO   218
0207:  XORLW  02
0208:  BTFSC  03.2
0209:  GOTO   21E
020A:  GOTO   223
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
020B:  MOVLW  01
020C:  MOVWF  23
020D:  MOVWF  24
020E:  CALL   1EB
020F:  GOTO   228
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0210:  CLRF   27
0211:  MOVLW  01
0212:  MOVWF  28
0213:  CALL   17A
....................                      delay_ms(2); 
0214:  MOVLW  02
0215:  MOVWF  23
0216:  CALL   153
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0217:  GOTO   228
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0218:  MOVLW  01
0219:  MOVWF  23
021A:  MOVLW  02
021B:  MOVWF  24
021C:  CALL   1EB
021D:  GOTO   228
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
021E:  CLRF   27
021F:  MOVLW  10
0220:  MOVWF  28
0221:  CALL   17A
0222:  GOTO   228
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0223:  MOVLW  01
0224:  MOVWF  27
0225:  MOVF   22,W
0226:  MOVWF  28
0227:  CALL   17A
....................      #endif 
....................    } 
0228:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use standard_io(A) 
....................  
.................... void main() 
0229:  MOVF   03,W
022A:  ANDLW  1F
022B:  MOVWF  03
022C:  MOVLW  07
022D:  MOVWF  1F
022E:  BCF    03.7
.................... { 
....................    lcd_init(); 
022F:  GOTO   1BA
....................    lcd_putc("\f"); 
0230:  CLRF   21
0231:  MOVF   21,W
0232:  CALL   00C
0233:  IORLW  00
0234:  BTFSC  03.2
0235:  GOTO   23A
0236:  INCF   21,F
0237:  MOVWF  22
0238:  CALL   1FD
0239:  GOTO   231
....................    do{ 
....................       lcd_gotoxy(1,1); 
023A:  MOVLW  01
023B:  MOVWF  23
023C:  MOVWF  24
023D:  CALL   1EB
....................       printf(lcd_putc,"Esperando ERROR"); 
023E:  CLRF   21
023F:  MOVF   21,W
0240:  CALL   012
0241:  INCF   21,F
0242:  MOVWF  77
0243:  MOVWF  22
0244:  CALL   1FD
0245:  MOVLW  0F
0246:  SUBWF  21,W
0247:  BTFSS  03.2
0248:  GOTO   23F
....................       lcd_gotoxy(1,2); 
0249:  MOVLW  01
024A:  MOVWF  23
024B:  MOVLW  02
024C:  MOVWF  24
024D:  CALL   1EB
....................       printf(lcd_putc, "Registrador de Eventos"); 
024E:  CLRF   21
024F:  MOVF   21,W
0250:  CALL   026
0251:  INCF   21,F
0252:  MOVWF  77
0253:  MOVWF  22
0254:  CALL   1FD
0255:  MOVLW  16
0256:  SUBWF  21,W
0257:  BTFSS  03.2
0258:  GOTO   24F
....................       if (input(pin_a0) == 1) 
0259:  BSF    03.5
025A:  BSF    05.0
025B:  BCF    03.5
025C:  BTFSS  05.0
025D:  GOTO   289
....................       { 
....................          lcd_putc("\f"); 
025E:  CLRF   21
025F:  MOVF   21,W
0260:  CALL   00C
0261:  IORLW  00
0262:  BTFSC  03.2
0263:  GOTO   268
0264:  INCF   21,F
0265:  MOVWF  22
0266:  CALL   1FD
0267:  GOTO   25F
....................          lcd_gotoxy(1,1); 
0268:  MOVLW  01
0269:  MOVWF  23
026A:  MOVWF  24
026B:  CALL   1EB
....................          printf(lcd_putc, "Error en:"); 
026C:  CLRF   21
026D:  MOVF   21,W
026E:  CALL   041
026F:  INCF   21,F
0270:  MOVWF  77
0271:  MOVWF  22
0272:  CALL   1FD
0273:  MOVLW  09
0274:  SUBWF  21,W
0275:  BTFSS  03.2
0276:  GOTO   26D
....................          lcd_gotoxy(1,2); 
0277:  MOVLW  01
0278:  MOVWF  23
0279:  MOVLW  02
027A:  MOVWF  24
027B:  CALL   1EB
....................          printf(lcd_putc,"ERROR_011: la variable X1_VT_05"); 
027C:  CLRF   21
027D:  MOVF   21,W
027E:  CALL   04F
027F:  INCF   21,F
0280:  MOVWF  77
0281:  MOVWF  22
0282:  CALL   1FD
0283:  MOVLW  1F
0284:  SUBWF  21,W
0285:  BTFSS  03.2
0286:  GOTO   27D
....................          break; 
0287:  GOTO   339
....................       } 
0288:  GOTO   338
....................       else if (input(pin_a1) == 1) 
0289:  BSF    03.5
028A:  BSF    05.1
028B:  BCF    03.5
028C:  BTFSS  05.1
028D:  GOTO   2B9
....................       { 
....................          lcd_putc("\f"); 
028E:  CLRF   21
028F:  MOVF   21,W
0290:  CALL   00C
0291:  IORLW  00
0292:  BTFSC  03.2
0293:  GOTO   298
0294:  INCF   21,F
0295:  MOVWF  22
0296:  CALL   1FD
0297:  GOTO   28F
....................          lcd_gotoxy(1,1); 
0298:  MOVLW  01
0299:  MOVWF  23
029A:  MOVWF  24
029B:  CALL   1EB
....................          printf(lcd_putc, "Error en:"); 
029C:  CLRF   21
029D:  MOVF   21,W
029E:  CALL   041
029F:  INCF   21,F
02A0:  MOVWF  77
02A1:  MOVWF  22
02A2:  CALL   1FD
02A3:  MOVLW  09
02A4:  SUBWF  21,W
02A5:  BTFSS  03.2
02A6:  GOTO   29D
....................          lcd_gotoxy(1,2); 
02A7:  MOVLW  01
02A8:  MOVWF  23
02A9:  MOVLW  02
02AA:  MOVWF  24
02AB:  CALL   1EB
....................          printf(lcd_putc, "ERROR_021: la variable X7_VT_05"); 
02AC:  CLRF   21
02AD:  MOVF   21,W
02AE:  CALL   073
02AF:  INCF   21,F
02B0:  MOVWF  77
02B1:  MOVWF  22
02B2:  CALL   1FD
02B3:  MOVLW  1F
02B4:  SUBWF  21,W
02B5:  BTFSS  03.2
02B6:  GOTO   2AD
....................          break; 
02B7:  GOTO   339
....................       } 
02B8:  GOTO   338
....................       else if (input(pin_a2) == 1) 
02B9:  BSF    03.5
02BA:  BSF    05.2
02BB:  BCF    03.5
02BC:  BTFSS  05.2
02BD:  GOTO   2D9
....................       { 
....................          lcd_putc("\f"); 
02BE:  CLRF   21
02BF:  MOVF   21,W
02C0:  CALL   00C
02C1:  IORLW  00
02C2:  BTFSC  03.2
02C3:  GOTO   2C8
02C4:  INCF   21,F
02C5:  MOVWF  22
02C6:  CALL   1FD
02C7:  GOTO   2BF
....................          lcd_gotoxy(1,1); 
02C8:  MOVLW  01
02C9:  MOVWF  23
02CA:  MOVWF  24
02CB:  CALL   1EB
....................          printf(lcd_putc, "Error en:\nERROR_031: la variable X6_VT_05"); 
02CC:  CLRF   21
02CD:  MOVF   21,W
02CE:  CALL   097
02CF:  INCF   21,F
02D0:  MOVWF  77
02D1:  MOVWF  22
02D2:  CALL   1FD
02D3:  MOVLW  29
02D4:  SUBWF  21,W
02D5:  BTFSS  03.2
02D6:  GOTO   2CD
....................          break; 
02D7:  GOTO   339
....................       } 
02D8:  GOTO   338
....................       else if (input(pin_a3) == 1) 
02D9:  BSF    03.5
02DA:  BSF    05.3
02DB:  BCF    03.5
02DC:  BTFSS  05.3
02DD:  GOTO   2F9
....................       { 
....................          lcd_putc("\f"); 
02DE:  CLRF   21
02DF:  MOVF   21,W
02E0:  CALL   00C
02E1:  IORLW  00
02E2:  BTFSC  03.2
02E3:  GOTO   2E8
02E4:  INCF   21,F
02E5:  MOVWF  22
02E6:  CALL   1FD
02E7:  GOTO   2DF
....................          lcd_gotoxy(1,1); 
02E8:  MOVLW  01
02E9:  MOVWF  23
02EA:  MOVWF  24
02EB:  CALL   1EB
....................          printf(lcd_putc, "\fError en:\nERROR_011: la variable X1_VT_6"); 
02EC:  CLRF   21
02ED:  MOVF   21,W
02EE:  CALL   0C5
02EF:  INCF   21,F
02F0:  MOVWF  77
02F1:  MOVWF  22
02F2:  CALL   1FD
02F3:  MOVLW  29
02F4:  SUBWF  21,W
02F5:  BTFSS  03.2
02F6:  GOTO   2ED
....................          break; 
02F7:  GOTO   339
....................       } 
02F8:  GOTO   338
....................       else if (input(pin_a4) == 1) 
02F9:  BSF    03.5
02FA:  BSF    05.4
02FB:  BCF    03.5
02FC:  BTFSS  05.4
02FD:  GOTO   319
....................       { 
....................          lcd_putc("\f"); 
02FE:  CLRF   21
02FF:  MOVF   21,W
0300:  CALL   00C
0301:  IORLW  00
0302:  BTFSC  03.2
0303:  GOTO   308
0304:  INCF   21,F
0305:  MOVWF  22
0306:  CALL   1FD
0307:  GOTO   2FF
....................          lcd_gotoxy(1,1); 
0308:  MOVLW  01
0309:  MOVWF  23
030A:  MOVWF  24
030B:  CALL   1EB
....................          printf(lcd_putc, "\fError en:\nERROR_021: la variable X7_VT_6"); 
030C:  CLRF   21
030D:  MOVF   21,W
030E:  CALL   0F3
030F:  INCF   21,F
0310:  MOVWF  77
0311:  MOVWF  22
0312:  CALL   1FD
0313:  MOVLW  29
0314:  SUBWF  21,W
0315:  BTFSS  03.2
0316:  GOTO   30D
....................          break; 
0317:  GOTO   339
....................       } 
0318:  GOTO   338
....................       else if (input(pin_a5) == 1) 
0319:  BSF    03.5
031A:  BSF    05.5
031B:  BCF    03.5
031C:  BTFSS  05.5
031D:  GOTO   338
....................       { 
....................          lcd_putc("\f"); 
031E:  CLRF   21
031F:  MOVF   21,W
0320:  CALL   00C
0321:  IORLW  00
0322:  BTFSC  03.2
0323:  GOTO   328
0324:  INCF   21,F
0325:  MOVWF  22
0326:  CALL   1FD
0327:  GOTO   31F
....................          lcd_gotoxy(1,1); 
0328:  MOVLW  01
0329:  MOVWF  23
032A:  MOVWF  24
032B:  CALL   1EB
....................          printf(lcd_putc, "\fError en:\n\fERROR_031: la variable X6_VT_6"); 
032C:  CLRF   21
032D:  MOVF   21,W
032E:  CALL   124
032F:  INCF   21,F
0330:  MOVWF  77
0331:  MOVWF  22
0332:  CALL   1FD
0333:  MOVLW  2A
0334:  SUBWF  21,W
0335:  BTFSS  03.2
0336:  GOTO   32D
....................          break; 
0337:  GOTO   339
....................       } 
....................    }while(true); 
0338:  GOTO   23A
.................... } 
0339:  SLEEP

Configuration Fuses:
   Word  1: 3F61   NOWDT PUT XT MCLR BROWNOUT NOLVP NOCPD NOPROTECT
