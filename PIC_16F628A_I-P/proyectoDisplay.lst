CCS PCM C Compiler, Version 5.008, 5967               15-abr.-21 19:29

               Filename:   C:\Users\igngg\Downloads\cafProyect01\PIC_16F628A_I-P\proyectoDisplay.lst

               ROM used:   1639 words (80%)
                           Largest free fragment is 409
               RAM used:   9 (4%) at main() level
                           17 (8%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   342
0003:  NOP
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  0C
0011:  RETLW  00
0012:  BCF    0A.0
0013:  BCF    0A.1
0014:  BCF    0A.2
0015:  ADDWF  02,F
0016:  RETLW  45
0017:  RETLW  73
0018:  RETLW  70
0019:  RETLW  65
001A:  RETLW  72
001B:  RETLW  61
001C:  RETLW  6E
001D:  RETLW  64
001E:  RETLW  6F
001F:  RETLW  20
0020:  RETLW  45
0021:  RETLW  52
0022:  RETLW  52
0023:  RETLW  4F
0024:  RETLW  52
0025:  RETLW  00
0026:  BCF    0A.0
0027:  BCF    0A.1
0028:  BCF    0A.2
0029:  ADDWF  02,F
002A:  RETLW  52
002B:  RETLW  65
002C:  RETLW  67
002D:  RETLW  69
002E:  RETLW  73
002F:  RETLW  74
0030:  RETLW  72
0031:  RETLW  61
0032:  RETLW  64
0033:  RETLW  6F
0034:  RETLW  72
0035:  RETLW  20
0036:  RETLW  64
0037:  RETLW  65
0038:  RETLW  20
0039:  RETLW  45
003A:  RETLW  76
003B:  RETLW  65
003C:  RETLW  6E
003D:  RETLW  74
003E:  RETLW  6F
003F:  RETLW  73
0040:  RETLW  00
0041:  BCF    0A.0
0042:  BCF    0A.1
0043:  BCF    0A.2
0044:  ADDWF  02,F
0045:  RETLW  45
0046:  RETLW  72
0047:  RETLW  72
0048:  RETLW  6F
0049:  RETLW  72
004A:  RETLW  20
004B:  RETLW  65
004C:  RETLW  6E
004D:  RETLW  3A
004E:  RETLW  00
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  45
0054:  RETLW  52
0055:  RETLW  52
0056:  RETLW  4F
0057:  RETLW  52
0058:  RETLW  5F
0059:  RETLW  30
005A:  RETLW  31
005B:  RETLW  31
005C:  RETLW  3A
005D:  RETLW  20
005E:  RETLW  6C
005F:  RETLW  61
0060:  RETLW  20
0061:  RETLW  76
0062:  RETLW  61
0063:  RETLW  72
0064:  RETLW  69
0065:  RETLW  61
0066:  RETLW  62
0067:  RETLW  6C
0068:  RETLW  65
0069:  RETLW  20
006A:  RETLW  58
006B:  RETLW  31
006C:  RETLW  5F
006D:  RETLW  56
006E:  RETLW  54
006F:  RETLW  5F
0070:  RETLW  30
0071:  RETLW  35
0072:  RETLW  00
0073:  BCF    0A.0
0074:  BCF    0A.1
0075:  BCF    0A.2
0076:  ADDWF  02,F
0077:  RETLW  45
0078:  RETLW  52
0079:  RETLW  52
007A:  RETLW  4F
007B:  RETLW  52
007C:  RETLW  5F
007D:  RETLW  30
007E:  RETLW  32
007F:  RETLW  31
0080:  RETLW  3A
0081:  RETLW  20
0082:  RETLW  6C
0083:  RETLW  61
0084:  RETLW  20
0085:  RETLW  76
0086:  RETLW  61
0087:  RETLW  72
0088:  RETLW  69
0089:  RETLW  61
008A:  RETLW  62
008B:  RETLW  6C
008C:  RETLW  65
008D:  RETLW  20
008E:  RETLW  58
008F:  RETLW  37
0090:  RETLW  5F
0091:  RETLW  56
0092:  RETLW  54
0093:  RETLW  5F
0094:  RETLW  30
0095:  RETLW  35
0096:  RETLW  00
0097:  BCF    0A.0
0098:  BCF    0A.1
0099:  BCF    0A.2
009A:  ADDWF  02,F
009B:  RETLW  45
009C:  RETLW  52
009D:  RETLW  52
009E:  RETLW  4F
009F:  RETLW  52
00A0:  RETLW  5F
00A1:  RETLW  30
00A2:  RETLW  33
00A3:  RETLW  31
00A4:  RETLW  3A
00A5:  RETLW  20
00A6:  RETLW  6C
00A7:  RETLW  61
00A8:  RETLW  20
00A9:  RETLW  76
00AA:  RETLW  61
00AB:  RETLW  72
00AC:  RETLW  69
00AD:  RETLW  61
00AE:  RETLW  62
00AF:  RETLW  6C
00B0:  RETLW  65
00B1:  RETLW  20
00B2:  RETLW  58
00B3:  RETLW  36
00B4:  RETLW  5F
00B5:  RETLW  56
00B6:  RETLW  54
00B7:  RETLW  5F
00B8:  RETLW  30
00B9:  RETLW  35
00BA:  RETLW  00
00BB:  BCF    0A.0
00BC:  BCF    0A.1
00BD:  BCF    0A.2
00BE:  ADDWF  02,F
00BF:  RETLW  45
00C0:  RETLW  52
00C1:  RETLW  52
00C2:  RETLW  4F
00C3:  RETLW  52
00C4:  RETLW  5F
00C5:  RETLW  30
00C6:  RETLW  31
00C7:  RETLW  32
00C8:  RETLW  3A
00C9:  RETLW  20
00CA:  RETLW  6C
00CB:  RETLW  61
00CC:  RETLW  20
00CD:  RETLW  76
00CE:  RETLW  61
00CF:  RETLW  72
00D0:  RETLW  69
00D1:  RETLW  61
00D2:  RETLW  62
00D3:  RETLW  6C
00D4:  RETLW  65
00D5:  RETLW  20
00D6:  RETLW  58
00D7:  RETLW  31
00D8:  RETLW  5F
00D9:  RETLW  56
00DA:  RETLW  54
00DB:  RETLW  5F
00DC:  RETLW  36
00DD:  RETLW  00
00DE:  BCF    0A.0
00DF:  BCF    0A.1
00E0:  BCF    0A.2
00E1:  ADDLW  E5
00E2:  BTFSC  03.0
00E3:  INCF   0A,F
00E4:  MOVWF  02
00E5:  RETLW  45
00E6:  RETLW  52
00E7:  RETLW  52
00E8:  RETLW  4F
00E9:  RETLW  52
00EA:  RETLW  5F
00EB:  RETLW  30
00EC:  RETLW  32
00ED:  RETLW  32
00EE:  RETLW  3A
00EF:  RETLW  20
00F0:  RETLW  6C
00F1:  RETLW  61
00F2:  RETLW  20
00F3:  RETLW  76
00F4:  RETLW  61
00F5:  RETLW  72
00F6:  RETLW  69
00F7:  RETLW  61
00F8:  RETLW  62
00F9:  RETLW  6C
00FA:  RETLW  65
00FB:  RETLW  20
00FC:  RETLW  58
00FD:  RETLW  37
00FE:  RETLW  5F
00FF:  RETLW  56
0100:  RETLW  54
0101:  RETLW  5F
0102:  RETLW  36
0103:  RETLW  00
0104:  BSF    0A.0
0105:  BCF    0A.1
0106:  BCF    0A.2
0107:  ADDWF  02,F
0108:  RETLW  45
0109:  RETLW  52
010A:  RETLW  52
010B:  RETLW  4F
010C:  RETLW  52
010D:  RETLW  5F
010E:  RETLW  30
010F:  RETLW  33
0110:  RETLW  32
0111:  RETLW  3A
0112:  RETLW  20
0113:  RETLW  6C
0114:  RETLW  61
0115:  RETLW  20
0116:  RETLW  76
0117:  RETLW  61
0118:  RETLW  72
0119:  RETLW  69
011A:  RETLW  61
011B:  RETLW  62
011C:  RETLW  6C
011D:  RETLW  65
011E:  RETLW  20
011F:  RETLW  58
0120:  RETLW  36
0121:  RETLW  5F
0122:  RETLW  56
0123:  RETLW  54
0124:  RETLW  5F
0125:  RETLW  36
0126:  RETLW  00
0127:  BSF    0A.0
0128:  BCF    0A.1
0129:  BCF    0A.2
012A:  ADDWF  02,F
012B:  RETLW  45
012C:  RETLW  52
012D:  RETLW  52
012E:  RETLW  4F
012F:  RETLW  52
0130:  RETLW  5F
0131:  RETLW  30
0132:  RETLW  31
0133:  RETLW  33
0134:  RETLW  3A
0135:  RETLW  20
0136:  RETLW  6C
0137:  RETLW  61
0138:  RETLW  20
0139:  RETLW  76
013A:  RETLW  61
013B:  RETLW  72
013C:  RETLW  69
013D:  RETLW  61
013E:  RETLW  62
013F:  RETLW  6C
0140:  RETLW  65
0141:  RETLW  20
0142:  RETLW  58
0143:  RETLW  37
0144:  RETLW  5F
0145:  RETLW  56
0146:  RETLW  54
0147:  RETLW  5F
0148:  RETLW  30
0149:  RETLW  35
014A:  RETLW  00
014B:  BSF    0A.0
014C:  BCF    0A.1
014D:  BCF    0A.2
014E:  ADDWF  02,F
014F:  RETLW  45
0150:  RETLW  52
0151:  RETLW  52
0152:  RETLW  4F
0153:  RETLW  52
0154:  RETLW  5F
0155:  RETLW  30
0156:  RETLW  32
0157:  RETLW  33
0158:  RETLW  3A
0159:  RETLW  20
015A:  RETLW  6C
015B:  RETLW  61
015C:  RETLW  20
015D:  RETLW  76
015E:  RETLW  61
015F:  RETLW  72
0160:  RETLW  69
0161:  RETLW  61
0162:  RETLW  62
0163:  RETLW  6C
0164:  RETLW  65
0165:  RETLW  20
0166:  RETLW  58
0167:  RETLW  37
0168:  RETLW  5F
0169:  RETLW  56
016A:  RETLW  54
016B:  RETLW  5F
016C:  RETLW  30
016D:  RETLW  35
016E:  RETLW  00
016F:  BSF    0A.0
0170:  BCF    0A.1
0171:  BCF    0A.2
0172:  ADDWF  02,F
0173:  RETLW  45
0174:  RETLW  52
0175:  RETLW  52
0176:  RETLW  4F
0177:  RETLW  52
0178:  RETLW  5F
0179:  RETLW  30
017A:  RETLW  33
017B:  RETLW  33
017C:  RETLW  3A
017D:  RETLW  20
017E:  RETLW  6C
017F:  RETLW  61
0180:  RETLW  20
0181:  RETLW  76
0182:  RETLW  61
0183:  RETLW  72
0184:  RETLW  69
0185:  RETLW  61
0186:  RETLW  62
0187:  RETLW  6C
0188:  RETLW  65
0189:  RETLW  20
018A:  RETLW  58
018B:  RETLW  36
018C:  RETLW  5F
018D:  RETLW  56
018E:  RETLW  54
018F:  RETLW  5F
0190:  RETLW  30
0191:  RETLW  35
0192:  RETLW  00
0193:  BSF    0A.0
0194:  BCF    0A.1
0195:  BCF    0A.2
0196:  ADDWF  02,F
0197:  RETLW  45
0198:  RETLW  52
0199:  RETLW  52
019A:  RETLW  4F
019B:  RETLW  52
019C:  RETLW  5F
019D:  RETLW  30
019E:  RETLW  31
019F:  RETLW  34
01A0:  RETLW  3A
01A1:  RETLW  20
01A2:  RETLW  6C
01A3:  RETLW  61
01A4:  RETLW  20
01A5:  RETLW  76
01A6:  RETLW  61
01A7:  RETLW  72
01A8:  RETLW  69
01A9:  RETLW  61
01AA:  RETLW  62
01AB:  RETLW  6C
01AC:  RETLW  65
01AD:  RETLW  20
01AE:  RETLW  58
01AF:  RETLW  37
01B0:  RETLW  5F
01B1:  RETLW  56
01B2:  RETLW  54
01B3:  RETLW  5F
01B4:  RETLW  36
01B5:  RETLW  00
01B6:  BSF    0A.0
01B7:  BCF    0A.1
01B8:  BCF    0A.2
01B9:  ADDWF  02,F
01BA:  RETLW  45
01BB:  RETLW  52
01BC:  RETLW  52
01BD:  RETLW  4F
01BE:  RETLW  52
01BF:  RETLW  5F
01C0:  RETLW  30
01C1:  RETLW  32
01C2:  RETLW  34
01C3:  RETLW  3A
01C4:  RETLW  20
01C5:  RETLW  6C
01C6:  RETLW  61
01C7:  RETLW  20
01C8:  RETLW  76
01C9:  RETLW  61
01CA:  RETLW  72
01CB:  RETLW  69
01CC:  RETLW  61
01CD:  RETLW  62
01CE:  RETLW  6C
01CF:  RETLW  65
01D0:  RETLW  20
01D1:  RETLW  58
01D2:  RETLW  37
01D3:  RETLW  5F
01D4:  RETLW  56
01D5:  RETLW  54
01D6:  RETLW  5F
01D7:  RETLW  36
01D8:  RETLW  00
01D9:  BSF    0A.0
01DA:  BCF    0A.1
01DB:  BCF    0A.2
01DC:  ADDWF  02,F
01DD:  RETLW  45
01DE:  RETLW  52
01DF:  RETLW  52
01E0:  RETLW  4F
01E1:  RETLW  52
01E2:  RETLW  5F
01E3:  RETLW  30
01E4:  RETLW  33
01E5:  RETLW  34
01E6:  RETLW  3A
01E7:  RETLW  20
01E8:  RETLW  6C
01E9:  RETLW  61
01EA:  RETLW  20
01EB:  RETLW  76
01EC:  RETLW  61
01ED:  RETLW  72
01EE:  RETLW  69
01EF:  RETLW  61
01F0:  RETLW  62
01F1:  RETLW  6C
01F2:  RETLW  65
01F3:  RETLW  20
01F4:  RETLW  58
01F5:  RETLW  36
01F6:  RETLW  5F
01F7:  RETLW  56
01F8:  RETLW  54
01F9:  RETLW  5F
01FA:  RETLW  36
01FB:  RETLW  00
....................  
.................... #list 
....................  
.................... #use delay(clock = 4000000)        /* OSCILADOR INTERNO */ 
01FC:  MOVLW  23
01FD:  MOVWF  04
01FE:  BCF    03.7
01FF:  MOVF   00,W
0200:  BTFSC  03.2
0201:  GOTO   210
0202:  MOVLW  01
0203:  MOVWF  78
0204:  CLRF   77
0205:  DECFSZ 77,F
0206:  GOTO   205
0207:  DECFSZ 78,F
0208:  GOTO   204
0209:  MOVLW  4A
020A:  MOVWF  77
020B:  DECFSZ 77,F
020C:  GOTO   20B
020D:  GOTO   20E
020E:  DECFSZ 00,F
020F:  GOTO   202
0210:  RETURN
.................... #define LCD_ENABLE_PIN PIN_B0 /* ASIGNAMOS EL PIN "B0" COMO SALIDA PARA E */ 
.................... #define LCD_RS_PIN PIN_B1     /* ASIGNAMOS EL PIN "B1" COMO SALIDA PARA RS*/ 
.................... #define LCD_RW_PIN PIN_B2     /* ASIGNAMOS EL PIN "B2" COMO SALIDA PARA RW*/ 
.................... #define LCD_DATA4 PIN_B4      /* ASIGNAMOS EL PIN "B4" COMO SALIDA PARA D4*/ 
.................... #define LCD_DATA5 PIN_B5      /* ASIGNAMOS EL PIN "B5" COMO SALIDA PARA D5*/ 
.................... #define LCD_DATA6 PIN_B6      /* ASIGNAMOS EL PIN "B6" COMO SALIDA PARA D6*/ 
.................... #define LCD_DATA7 PIN_B7      /* ASIGNAMOS EL PIN "B7" COMO SALIDA PARA D7*/ 
.................... #include <lcd.c>              /*libreria para usar el lcd*/ 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0275:  BSF    06.4
....................    output_float(LCD_DATA5); 
0276:  BSF    06.5
....................    output_float(LCD_DATA6); 
0277:  BSF    06.6
....................    output_float(LCD_DATA7); 
0278:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0279:  BCF    03.5
027A:  BSF    06.2
027B:  BSF    03.5
027C:  BCF    06.2
....................    delay_cycles(1); 
027D:  NOP
....................    lcd_output_enable(1); 
027E:  BCF    03.5
027F:  BSF    06.0
0280:  BSF    03.5
0281:  BCF    06.0
....................    delay_cycles(1); 
0282:  NOP
....................    high = lcd_read_nibble(); 
0283:  BCF    03.5
0284:  CALL   23C
0285:  MOVF   78,W
0286:  MOVWF  2A
....................        
....................    lcd_output_enable(0); 
0287:  BCF    06.0
0288:  BSF    03.5
0289:  BCF    06.0
....................    delay_cycles(1); 
028A:  NOP
....................    lcd_output_enable(1); 
028B:  BCF    03.5
028C:  BSF    06.0
028D:  BSF    03.5
028E:  BCF    06.0
....................    delay_us(1); 
028F:  NOP
....................    low = lcd_read_nibble(); 
0290:  BCF    03.5
0291:  CALL   23C
0292:  MOVF   78,W
0293:  MOVWF  29
....................        
....................    lcd_output_enable(0); 
0294:  BCF    06.0
0295:  BSF    03.5
0296:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0297:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0298:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0299:  BCF    06.6
....................    output_drive(LCD_DATA7); 
029A:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
029B:  BCF    03.5
029C:  SWAPF  2A,W
029D:  MOVWF  77
029E:  MOVLW  F0
029F:  ANDWF  77,F
02A0:  MOVF   77,W
02A1:  IORWF  29,W
02A2:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
023C:  CLRF   2B
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
023D:  BSF    03.5
023E:  BSF    06.4
023F:  MOVLW  00
0240:  BCF    03.5
0241:  BTFSC  06.4
0242:  MOVLW  01
0243:  IORWF  2B,F
....................    n |= input(LCD_DATA5) << 1; 
0244:  BSF    03.5
0245:  BSF    06.5
0246:  MOVLW  00
0247:  BCF    03.5
0248:  BTFSC  06.5
0249:  MOVLW  01
024A:  MOVWF  77
024B:  BCF    03.0
024C:  RLF    77,F
024D:  MOVF   77,W
024E:  IORWF  2B,F
....................    n |= input(LCD_DATA6) << 2; 
024F:  BSF    03.5
0250:  BSF    06.6
0251:  MOVLW  00
0252:  BCF    03.5
0253:  BTFSC  06.6
0254:  MOVLW  01
0255:  MOVWF  77
0256:  RLF    77,F
0257:  RLF    77,F
0258:  MOVLW  FC
0259:  ANDWF  77,F
025A:  MOVF   77,W
025B:  IORWF  2B,F
....................    n |= input(LCD_DATA7) << 3; 
025C:  BSF    03.5
025D:  BSF    06.7
025E:  MOVLW  00
025F:  BCF    03.5
0260:  BTFSC  06.7
0261:  MOVLW  01
0262:  MOVWF  77
0263:  RLF    77,F
0264:  RLF    77,F
0265:  RLF    77,F
0266:  MOVLW  F8
0267:  ANDWF  77,F
0268:  MOVF   77,W
0269:  IORWF  2B,F
....................     
....................    return(n); 
026A:  MOVF   2B,W
026B:  MOVWF  78
....................   #else 
026C:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0211:  BTFSC  2A.0
0212:  GOTO   215
0213:  BCF    06.4
0214:  GOTO   216
0215:  BSF    06.4
0216:  BSF    03.5
0217:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0218:  BCF    03.5
0219:  BTFSC  2A.1
021A:  GOTO   21D
021B:  BCF    06.5
021C:  GOTO   21E
021D:  BSF    06.5
021E:  BSF    03.5
021F:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0220:  BCF    03.5
0221:  BTFSC  2A.2
0222:  GOTO   225
0223:  BCF    06.6
0224:  GOTO   226
0225:  BSF    06.6
0226:  BSF    03.5
0227:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0228:  BCF    03.5
0229:  BTFSC  2A.3
022A:  GOTO   22D
022B:  BCF    06.7
022C:  GOTO   22E
022D:  BSF    06.7
022E:  BSF    03.5
022F:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0230:  NOP
....................    lcd_output_enable(1); 
0231:  BCF    03.5
0232:  BSF    06.0
0233:  BSF    03.5
0234:  BCF    06.0
....................    delay_us(2); 
0235:  GOTO   236
....................    lcd_output_enable(0); 
0236:  BCF    03.5
0237:  BCF    06.0
0238:  BSF    03.5
0239:  BCF    06.0
023A:  BCF    03.5
023B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
026D:  BSF    03.5
026E:  BCF    06.0
....................    lcd_rs_tris(); 
026F:  BCF    06.1
....................    lcd_rw_tris(); 
0270:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0271:  BCF    03.5
0272:  BCF    06.1
0273:  BSF    03.5
0274:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
02A3:  MOVF   78,W
02A4:  MOVWF  29
02A5:  BTFSS  29.7
02A6:  GOTO   2A9
02A7:  BSF    03.5
02A8:  GOTO   275
....................    lcd_output_rs(address); 
02A9:  MOVF   27,F
02AA:  BTFSS  03.2
02AB:  GOTO   2AE
02AC:  BCF    06.1
02AD:  GOTO   2AF
02AE:  BSF    06.1
02AF:  BSF    03.5
02B0:  BCF    06.1
....................    delay_cycles(1); 
02B1:  NOP
....................    lcd_output_rw(0); 
02B2:  BCF    03.5
02B3:  BCF    06.2
02B4:  BSF    03.5
02B5:  BCF    06.2
....................    delay_cycles(1); 
02B6:  NOP
....................    lcd_output_enable(0); 
02B7:  BCF    03.5
02B8:  BCF    06.0
02B9:  BSF    03.5
02BA:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
02BB:  BCF    03.5
02BC:  SWAPF  28,W
02BD:  MOVWF  29
02BE:  MOVLW  0F
02BF:  ANDWF  29,F
02C0:  MOVF   29,W
02C1:  MOVWF  2A
02C2:  CALL   211
....................    lcd_send_nibble(n & 0xf); 
02C3:  MOVF   28,W
02C4:  ANDLW  0F
02C5:  MOVWF  29
02C6:  MOVWF  2A
02C7:  CALL   211
02C8:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
02C9:  BSF    03.5
02CA:  BCF    06.4
....................    output_drive(LCD_DATA5); 
02CB:  BCF    06.5
....................    output_drive(LCD_DATA6); 
02CC:  BCF    06.6
....................    output_drive(LCD_DATA7); 
02CD:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
02CE:  BCF    06.0
....................    lcd_rs_tris(); 
02CF:  BCF    06.1
....................    lcd_rw_tris(); 
02D0:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
02D1:  BCF    03.5
02D2:  BCF    06.1
02D3:  BSF    03.5
02D4:  BCF    06.1
....................    lcd_output_rw(0); 
02D5:  BCF    03.5
02D6:  BCF    06.2
02D7:  BSF    03.5
02D8:  BCF    06.2
....................    lcd_output_enable(0); 
02D9:  BCF    03.5
02DA:  BCF    06.0
02DB:  BSF    03.5
02DC:  BCF    06.0
....................      
....................    delay_ms(15); 
02DD:  MOVLW  0F
02DE:  BCF    03.5
02DF:  MOVWF  23
02E0:  CALL   1FC
....................    for(i=1;i<=3;++i) 
02E1:  MOVLW  01
02E2:  MOVWF  21
02E3:  MOVF   21,W
02E4:  SUBLW  03
02E5:  BTFSS  03.0
02E6:  GOTO   2EF
....................    { 
....................        lcd_send_nibble(3); 
02E7:  MOVLW  03
02E8:  MOVWF  2A
02E9:  CALL   211
....................        delay_ms(5); 
02EA:  MOVLW  05
02EB:  MOVWF  23
02EC:  CALL   1FC
02ED:  INCF   21,F
02EE:  GOTO   2E3
....................    } 
....................     
....................    lcd_send_nibble(2); 
02EF:  MOVLW  02
02F0:  MOVWF  2A
02F1:  CALL   211
....................    delay_ms(5); 
02F2:  MOVLW  05
02F3:  MOVWF  23
02F4:  CALL   1FC
....................    for(i=0;i<=3;++i) 
02F5:  CLRF   21
02F6:  MOVF   21,W
02F7:  SUBLW  03
02F8:  BTFSS  03.0
02F9:  GOTO   303
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
02FA:  MOVF   21,W
02FB:  CALL   004
02FC:  MOVWF  22
02FD:  CLRF   27
02FE:  MOVF   22,W
02FF:  MOVWF  28
0300:  CALL   26D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0301:  INCF   21,F
0302:  GOTO   2F6
0303:  GOTO   349 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0304:  DECFSZ 24,W
0305:  GOTO   307
0306:  GOTO   30A
....................       address=LCD_LINE_TWO; 
0307:  MOVLW  40
0308:  MOVWF  25
0309:  GOTO   30B
....................    else 
....................       address=0; 
030A:  CLRF   25
....................       
....................    address+=x-1; 
030B:  MOVLW  01
030C:  SUBWF  23,W
030D:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address); 
030E:  MOVF   25,W
030F:  IORLW  80
0310:  MOVWF  26
0311:  CLRF   27
0312:  MOVF   26,W
0313:  MOVWF  28
0314:  CALL   26D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0315:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0316:  MOVF   22,W
0317:  XORLW  07
0318:  BTFSC  03.2
0319:  GOTO   324
031A:  XORLW  0B
031B:  BTFSC  03.2
031C:  GOTO   329
031D:  XORLW  06
031E:  BTFSC  03.2
031F:  GOTO   331
0320:  XORLW  02
0321:  BTFSC  03.2
0322:  GOTO   337
0323:  GOTO   33C
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0324:  MOVLW  01
0325:  MOVWF  23
0326:  MOVWF  24
0327:  CALL   304
0328:  GOTO   341
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0329:  CLRF   27
032A:  MOVLW  01
032B:  MOVWF  28
032C:  CALL   26D
....................                      delay_ms(2); 
032D:  MOVLW  02
032E:  MOVWF  23
032F:  CALL   1FC
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0330:  GOTO   341
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0331:  MOVLW  01
0332:  MOVWF  23
0333:  MOVLW  02
0334:  MOVWF  24
0335:  CALL   304
0336:  GOTO   341
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0337:  CLRF   27
0338:  MOVLW  10
0339:  MOVWF  28
033A:  CALL   26D
033B:  GOTO   341
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
033C:  MOVLW  01
033D:  MOVWF  27
033E:  MOVF   22,W
033F:  MOVWF  28
0340:  CALL   26D
....................      #endif 
....................    } 
0341:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #FUSES NOWDT                  /* No Watch Dog Timer*/ 
.................... #FUSES HS                     /* High speed Osc (> 4mhz)*/ 
.................... #FUSES PUT                    /* Power Up Timer*/ 
.................... #FUSES NOPROTECT              /* Code not protected from reading*/ 
.................... #FUSES NOBROWNOUT             /* No brownout reset*/ 
.................... #FUSES NOMCLR                 /* Master Clear pin enabled*/ 
.................... #FUSES NOLVP                  /* No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O*/ 
.................... #FUSES NOCPD 
....................  
.................... void main() 
0342:  MOVF   03,W
0343:  ANDLW  1F
0344:  MOVWF  03
0345:  MOVLW  07
0346:  MOVWF  1F
0347:  BCF    03.7
.................... { 
....................    lcd_init(); 
0348:  GOTO   2C9
....................    lcd_putc("\f"); 
0349:  CLRF   21
034A:  MOVF   21,W
034B:  CALL   00C
034C:  IORLW  00
034D:  BTFSC  03.2
034E:  GOTO   353
034F:  INCF   21,F
0350:  MOVWF  22
0351:  CALL   316
0352:  GOTO   34A
....................    do{ 
....................       lcd_gotoxy(1,1); 
0353:  MOVLW  01
0354:  MOVWF  23
0355:  MOVWF  24
0356:  CALL   304
....................       printf(lcd_putc,"Esperando ERROR"); 
0357:  CLRF   21
0358:  MOVF   21,W
0359:  CALL   012
035A:  INCF   21,F
035B:  MOVWF  77
035C:  MOVWF  22
035D:  CALL   316
035E:  MOVLW  0F
035F:  SUBWF  21,W
0360:  BTFSS  03.2
0361:  GOTO   358
....................       lcd_gotoxy(1,2); 
0362:  MOVLW  01
0363:  MOVWF  23
0364:  MOVLW  02
0365:  MOVWF  24
0366:  CALL   304
....................       printf(lcd_putc, "Registrador de Eventos"); 
0367:  CLRF   21
0368:  MOVF   21,W
0369:  CALL   026
036A:  INCF   21,F
036B:  MOVWF  77
036C:  MOVWF  22
036D:  CALL   316
036E:  MOVLW  16
036F:  SUBWF  21,W
0370:  BTFSS  03.2
0371:  GOTO   368
....................       //funcion de arduino lecturasEnSubida05 
....................       if      (input(PIN_A0) == 1 && input(PIN_A1)==0 && input(PIN_A2)==0 && input(PIN_A3)==0) 
0372:  BSF    03.5
0373:  BSF    05.0
0374:  BCF    03.5
0375:  BTFSS  05.0
0376:  GOTO   3B1
0377:  BSF    03.5
0378:  BSF    05.1
0379:  BCF    03.5
037A:  BTFSC  05.1
037B:  GOTO   3B1
037C:  BSF    03.5
037D:  BSF    05.2
037E:  BCF    03.5
037F:  BTFSC  05.2
0380:  GOTO   3B1
0381:  BSF    03.5
0382:  BSF    05.3
0383:  BCF    03.5
0384:  BTFSC  05.3
0385:  GOTO   3B1
....................       { 
....................          lcd_putc("\f"); 
0386:  CLRF   21
0387:  MOVF   21,W
0388:  CALL   00C
0389:  IORLW  00
038A:  BTFSC  03.2
038B:  GOTO   390
038C:  INCF   21,F
038D:  MOVWF  22
038E:  CALL   316
038F:  GOTO   387
....................          lcd_gotoxy(1,1); 
0390:  MOVLW  01
0391:  MOVWF  23
0392:  MOVWF  24
0393:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
0394:  CLRF   21
0395:  MOVF   21,W
0396:  CALL   041
0397:  INCF   21,F
0398:  MOVWF  77
0399:  MOVWF  22
039A:  CALL   316
039B:  MOVLW  09
039C:  SUBWF  21,W
039D:  BTFSS  03.2
039E:  GOTO   395
....................          lcd_gotoxy(1,2); 
039F:  MOVLW  01
03A0:  MOVWF  23
03A1:  MOVLW  02
03A2:  MOVWF  24
03A3:  CALL   304
....................          printf(lcd_putc,"ERROR_011: la variable X1_VT_05"); 
03A4:  CLRF   21
03A5:  MOVF   21,W
03A6:  CALL   04F
03A7:  INCF   21,F
03A8:  MOVWF  77
03A9:  MOVWF  22
03AA:  CALL   316
03AB:  MOVLW  1F
03AC:  SUBWF  21,W
03AD:  BTFSS  03.2
03AE:  GOTO   3A5
....................          break; 
03AF:  GOTO   666
....................       } 
03B0:  GOTO   665
....................       else if (input(PIN_A0) == 0 && input(PIN_A1)==1 && input(PIN_A2)==0 && input(PIN_A3)==0) 
03B1:  BSF    03.5
03B2:  BSF    05.0
03B3:  BCF    03.5
03B4:  BTFSC  05.0
03B5:  GOTO   3F0
03B6:  BSF    03.5
03B7:  BSF    05.1
03B8:  BCF    03.5
03B9:  BTFSS  05.1
03BA:  GOTO   3F0
03BB:  BSF    03.5
03BC:  BSF    05.2
03BD:  BCF    03.5
03BE:  BTFSC  05.2
03BF:  GOTO   3F0
03C0:  BSF    03.5
03C1:  BSF    05.3
03C2:  BCF    03.5
03C3:  BTFSC  05.3
03C4:  GOTO   3F0
....................       { 
....................          lcd_putc("\f"); 
03C5:  CLRF   21
03C6:  MOVF   21,W
03C7:  CALL   00C
03C8:  IORLW  00
03C9:  BTFSC  03.2
03CA:  GOTO   3CF
03CB:  INCF   21,F
03CC:  MOVWF  22
03CD:  CALL   316
03CE:  GOTO   3C6
....................          lcd_gotoxy(1,1); 
03CF:  MOVLW  01
03D0:  MOVWF  23
03D1:  MOVWF  24
03D2:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
03D3:  CLRF   21
03D4:  MOVF   21,W
03D5:  CALL   041
03D6:  INCF   21,F
03D7:  MOVWF  77
03D8:  MOVWF  22
03D9:  CALL   316
03DA:  MOVLW  09
03DB:  SUBWF  21,W
03DC:  BTFSS  03.2
03DD:  GOTO   3D4
....................          lcd_gotoxy(1,2); 
03DE:  MOVLW  01
03DF:  MOVWF  23
03E0:  MOVLW  02
03E1:  MOVWF  24
03E2:  CALL   304
....................          printf(lcd_putc, "ERROR_021: la variable X7_VT_05"); 
03E3:  CLRF   21
03E4:  MOVF   21,W
03E5:  CALL   073
03E6:  INCF   21,F
03E7:  MOVWF  77
03E8:  MOVWF  22
03E9:  CALL   316
03EA:  MOVLW  1F
03EB:  SUBWF  21,W
03EC:  BTFSS  03.2
03ED:  GOTO   3E4
....................          break; 
03EE:  GOTO   666
....................       } 
03EF:  GOTO   665
....................       else if (input(PIN_A0) == 1 && input(PIN_A1)==1 && input(PIN_A2)==0 && input(PIN_A3)==0) 
03F0:  BSF    03.5
03F1:  BSF    05.0
03F2:  BCF    03.5
03F3:  BTFSS  05.0
03F4:  GOTO   42F
03F5:  BSF    03.5
03F6:  BSF    05.1
03F7:  BCF    03.5
03F8:  BTFSS  05.1
03F9:  GOTO   42F
03FA:  BSF    03.5
03FB:  BSF    05.2
03FC:  BCF    03.5
03FD:  BTFSC  05.2
03FE:  GOTO   42F
03FF:  BSF    03.5
0400:  BSF    05.3
0401:  BCF    03.5
0402:  BTFSC  05.3
0403:  GOTO   42F
....................       { 
....................          lcd_putc("\f"); 
0404:  CLRF   21
0405:  MOVF   21,W
0406:  CALL   00C
0407:  IORLW  00
0408:  BTFSC  03.2
0409:  GOTO   40E
040A:  INCF   21,F
040B:  MOVWF  22
040C:  CALL   316
040D:  GOTO   405
....................          lcd_gotoxy(1,1); 
040E:  MOVLW  01
040F:  MOVWF  23
0410:  MOVWF  24
0411:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
0412:  CLRF   21
0413:  MOVF   21,W
0414:  CALL   041
0415:  INCF   21,F
0416:  MOVWF  77
0417:  MOVWF  22
0418:  CALL   316
0419:  MOVLW  09
041A:  SUBWF  21,W
041B:  BTFSS  03.2
041C:  GOTO   413
....................          lcd_gotoxy(1,2); 
041D:  MOVLW  01
041E:  MOVWF  23
041F:  MOVLW  02
0420:  MOVWF  24
0421:  CALL   304
....................          printf(lcd_putc, "ERROR_031: la variable X6_VT_05"); 
0422:  CLRF   21
0423:  MOVF   21,W
0424:  CALL   097
0425:  INCF   21,F
0426:  MOVWF  77
0427:  MOVWF  22
0428:  CALL   316
0429:  MOVLW  1F
042A:  SUBWF  21,W
042B:  BTFSS  03.2
042C:  GOTO   423
....................          break; 
042D:  GOTO   666
....................       } 
042E:  GOTO   665
....................       //funcion de arduino lecturasEnSubida6 
....................       else if (input(PIN_A0) == 0 && input(PIN_A1)==0 && input(PIN_A2)==1 && input(PIN_A3)==0) 
042F:  BSF    03.5
0430:  BSF    05.0
0431:  BCF    03.5
0432:  BTFSC  05.0
0433:  GOTO   46E
0434:  BSF    03.5
0435:  BSF    05.1
0436:  BCF    03.5
0437:  BTFSC  05.1
0438:  GOTO   46E
0439:  BSF    03.5
043A:  BSF    05.2
043B:  BCF    03.5
043C:  BTFSS  05.2
043D:  GOTO   46E
043E:  BSF    03.5
043F:  BSF    05.3
0440:  BCF    03.5
0441:  BTFSC  05.3
0442:  GOTO   46E
....................       { 
....................          lcd_putc("\f"); 
0443:  CLRF   21
0444:  MOVF   21,W
0445:  CALL   00C
0446:  IORLW  00
0447:  BTFSC  03.2
0448:  GOTO   44D
0449:  INCF   21,F
044A:  MOVWF  22
044B:  CALL   316
044C:  GOTO   444
....................          lcd_gotoxy(1,1); 
044D:  MOVLW  01
044E:  MOVWF  23
044F:  MOVWF  24
0450:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
0451:  CLRF   21
0452:  MOVF   21,W
0453:  CALL   041
0454:  INCF   21,F
0455:  MOVWF  77
0456:  MOVWF  22
0457:  CALL   316
0458:  MOVLW  09
0459:  SUBWF  21,W
045A:  BTFSS  03.2
045B:  GOTO   452
....................          lcd_gotoxy(1,2); 
045C:  MOVLW  01
045D:  MOVWF  23
045E:  MOVLW  02
045F:  MOVWF  24
0460:  CALL   304
....................          printf(lcd_putc,"ERROR_012: la variable X1_VT_6"); 
0461:  CLRF   21
0462:  MOVF   21,W
0463:  CALL   0BB
0464:  INCF   21,F
0465:  MOVWF  77
0466:  MOVWF  22
0467:  CALL   316
0468:  MOVLW  1E
0469:  SUBWF  21,W
046A:  BTFSS  03.2
046B:  GOTO   462
....................          break; 
046C:  GOTO   666
....................       } 
046D:  GOTO   665
....................       else if (input(PIN_A0) == 1 && input(PIN_A1)==0 && input(PIN_A2)==1 && input(PIN_A3)==0) 
046E:  BSF    03.5
046F:  BSF    05.0
0470:  BCF    03.5
0471:  BTFSS  05.0
0472:  GOTO   4AD
0473:  BSF    03.5
0474:  BSF    05.1
0475:  BCF    03.5
0476:  BTFSC  05.1
0477:  GOTO   4AD
0478:  BSF    03.5
0479:  BSF    05.2
047A:  BCF    03.5
047B:  BTFSS  05.2
047C:  GOTO   4AD
047D:  BSF    03.5
047E:  BSF    05.3
047F:  BCF    03.5
0480:  BTFSC  05.3
0481:  GOTO   4AD
....................       { 
....................          lcd_putc("\f"); 
0482:  CLRF   21
0483:  MOVF   21,W
0484:  CALL   00C
0485:  IORLW  00
0486:  BTFSC  03.2
0487:  GOTO   48C
0488:  INCF   21,F
0489:  MOVWF  22
048A:  CALL   316
048B:  GOTO   483
....................          lcd_gotoxy(1,1); 
048C:  MOVLW  01
048D:  MOVWF  23
048E:  MOVWF  24
048F:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
0490:  CLRF   21
0491:  MOVF   21,W
0492:  CALL   041
0493:  INCF   21,F
0494:  MOVWF  77
0495:  MOVWF  22
0496:  CALL   316
0497:  MOVLW  09
0498:  SUBWF  21,W
0499:  BTFSS  03.2
049A:  GOTO   491
....................          lcd_gotoxy(1,2); 
049B:  MOVLW  01
049C:  MOVWF  23
049D:  MOVLW  02
049E:  MOVWF  24
049F:  CALL   304
....................          printf(lcd_putc, "ERROR_022: la variable X7_VT_6"); 
04A0:  CLRF   21
04A1:  MOVF   21,W
04A2:  CALL   0DE
04A3:  INCF   21,F
04A4:  MOVWF  77
04A5:  MOVWF  22
04A6:  CALL   316
04A7:  MOVLW  1E
04A8:  SUBWF  21,W
04A9:  BTFSS  03.2
04AA:  GOTO   4A1
....................          break; 
04AB:  GOTO   666
....................       } 
04AC:  GOTO   665
....................       else if (input(PIN_A0) == 0 && input(PIN_A1)==1 && input(PIN_A2)==1 && input(PIN_A3)==0) 
04AD:  BSF    03.5
04AE:  BSF    05.0
04AF:  BCF    03.5
04B0:  BTFSC  05.0
04B1:  GOTO   4EC
04B2:  BSF    03.5
04B3:  BSF    05.1
04B4:  BCF    03.5
04B5:  BTFSS  05.1
04B6:  GOTO   4EC
04B7:  BSF    03.5
04B8:  BSF    05.2
04B9:  BCF    03.5
04BA:  BTFSS  05.2
04BB:  GOTO   4EC
04BC:  BSF    03.5
04BD:  BSF    05.3
04BE:  BCF    03.5
04BF:  BTFSC  05.3
04C0:  GOTO   4EC
....................       { 
....................          lcd_putc("\f"); 
04C1:  CLRF   21
04C2:  MOVF   21,W
04C3:  CALL   00C
04C4:  IORLW  00
04C5:  BTFSC  03.2
04C6:  GOTO   4CB
04C7:  INCF   21,F
04C8:  MOVWF  22
04C9:  CALL   316
04CA:  GOTO   4C2
....................          lcd_gotoxy(1,1); 
04CB:  MOVLW  01
04CC:  MOVWF  23
04CD:  MOVWF  24
04CE:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
04CF:  CLRF   21
04D0:  MOVF   21,W
04D1:  CALL   041
04D2:  INCF   21,F
04D3:  MOVWF  77
04D4:  MOVWF  22
04D5:  CALL   316
04D6:  MOVLW  09
04D7:  SUBWF  21,W
04D8:  BTFSS  03.2
04D9:  GOTO   4D0
....................          lcd_gotoxy(1,2); 
04DA:  MOVLW  01
04DB:  MOVWF  23
04DC:  MOVLW  02
04DD:  MOVWF  24
04DE:  CALL   304
....................          printf(lcd_putc, "ERROR_032: la variable X6_VT_6"); 
04DF:  CLRF   21
04E0:  MOVF   21,W
04E1:  CALL   104
04E2:  INCF   21,F
04E3:  MOVWF  77
04E4:  MOVWF  22
04E5:  CALL   316
04E6:  MOVLW  1E
04E7:  SUBWF  21,W
04E8:  BTFSS  03.2
04E9:  GOTO   4E0
....................          break; 
04EA:  GOTO   666
....................       } 
04EB:  GOTO   665
....................       //funcion de arduino lecturasEnBajada05 
....................       else if (input(PIN_A0) == 1 && input(PIN_A1)==1 && input(PIN_A2)==1 && input(PIN_A3)==0) 
04EC:  BSF    03.5
04ED:  BSF    05.0
04EE:  BCF    03.5
04EF:  BTFSS  05.0
04F0:  GOTO   52B
04F1:  BSF    03.5
04F2:  BSF    05.1
04F3:  BCF    03.5
04F4:  BTFSS  05.1
04F5:  GOTO   52B
04F6:  BSF    03.5
04F7:  BSF    05.2
04F8:  BCF    03.5
04F9:  BTFSS  05.2
04FA:  GOTO   52B
04FB:  BSF    03.5
04FC:  BSF    05.3
04FD:  BCF    03.5
04FE:  BTFSC  05.3
04FF:  GOTO   52B
....................       { 
....................          lcd_putc("\f"); 
0500:  CLRF   21
0501:  MOVF   21,W
0502:  CALL   00C
0503:  IORLW  00
0504:  BTFSC  03.2
0505:  GOTO   50A
0506:  INCF   21,F
0507:  MOVWF  22
0508:  CALL   316
0509:  GOTO   501
....................          lcd_gotoxy(1,1); 
050A:  MOVLW  01
050B:  MOVWF  23
050C:  MOVWF  24
050D:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
050E:  CLRF   21
050F:  MOVF   21,W
0510:  CALL   041
0511:  INCF   21,F
0512:  MOVWF  77
0513:  MOVWF  22
0514:  CALL   316
0515:  MOVLW  09
0516:  SUBWF  21,W
0517:  BTFSS  03.2
0518:  GOTO   50F
....................          lcd_gotoxy(1,2); 
0519:  MOVLW  01
051A:  MOVWF  23
051B:  MOVLW  02
051C:  MOVWF  24
051D:  CALL   304
....................          printf(lcd_putc, "ERROR_013: la variable X7_VT_05"); 
051E:  CLRF   21
051F:  MOVF   21,W
0520:  CALL   127
0521:  INCF   21,F
0522:  MOVWF  77
0523:  MOVWF  22
0524:  CALL   316
0525:  MOVLW  1F
0526:  SUBWF  21,W
0527:  BTFSS  03.2
0528:  GOTO   51F
....................          break; 
0529:  GOTO   666
....................       } 
052A:  GOTO   665
....................       else if (input(PIN_A0) == 0 && input(PIN_A1)==0 && input(PIN_A2)==0 && input(PIN_A3)==1) 
052B:  BSF    03.5
052C:  BSF    05.0
052D:  BCF    03.5
052E:  BTFSC  05.0
052F:  GOTO   56A
0530:  BSF    03.5
0531:  BSF    05.1
0532:  BCF    03.5
0533:  BTFSC  05.1
0534:  GOTO   56A
0535:  BSF    03.5
0536:  BSF    05.2
0537:  BCF    03.5
0538:  BTFSC  05.2
0539:  GOTO   56A
053A:  BSF    03.5
053B:  BSF    05.3
053C:  BCF    03.5
053D:  BTFSS  05.3
053E:  GOTO   56A
....................       { 
....................          lcd_putc("\f"); 
053F:  CLRF   21
0540:  MOVF   21,W
0541:  CALL   00C
0542:  IORLW  00
0543:  BTFSC  03.2
0544:  GOTO   549
0545:  INCF   21,F
0546:  MOVWF  22
0547:  CALL   316
0548:  GOTO   540
....................          lcd_gotoxy(1,1); 
0549:  MOVLW  01
054A:  MOVWF  23
054B:  MOVWF  24
054C:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
054D:  CLRF   21
054E:  MOVF   21,W
054F:  CALL   041
0550:  INCF   21,F
0551:  MOVWF  77
0552:  MOVWF  22
0553:  CALL   316
0554:  MOVLW  09
0555:  SUBWF  21,W
0556:  BTFSS  03.2
0557:  GOTO   54E
....................          lcd_gotoxy(1,2); 
0558:  MOVLW  01
0559:  MOVWF  23
055A:  MOVLW  02
055B:  MOVWF  24
055C:  CALL   304
....................          printf(lcd_putc,"ERROR_023: la variable X7_VT_05"); 
055D:  CLRF   21
055E:  MOVF   21,W
055F:  CALL   14B
0560:  INCF   21,F
0561:  MOVWF  77
0562:  MOVWF  22
0563:  CALL   316
0564:  MOVLW  1F
0565:  SUBWF  21,W
0566:  BTFSS  03.2
0567:  GOTO   55E
....................          break; 
0568:  GOTO   666
....................       } 
0569:  GOTO   665
....................       else if (input(PIN_A0) == 1 && input(PIN_A1)==0 && input(PIN_A2)==0 && input(PIN_A3)==1) 
056A:  BSF    03.5
056B:  BSF    05.0
056C:  BCF    03.5
056D:  BTFSS  05.0
056E:  GOTO   5A9
056F:  BSF    03.5
0570:  BSF    05.1
0571:  BCF    03.5
0572:  BTFSC  05.1
0573:  GOTO   5A9
0574:  BSF    03.5
0575:  BSF    05.2
0576:  BCF    03.5
0577:  BTFSC  05.2
0578:  GOTO   5A9
0579:  BSF    03.5
057A:  BSF    05.3
057B:  BCF    03.5
057C:  BTFSS  05.3
057D:  GOTO   5A9
....................       { 
....................          lcd_putc("\f"); 
057E:  CLRF   21
057F:  MOVF   21,W
0580:  CALL   00C
0581:  IORLW  00
0582:  BTFSC  03.2
0583:  GOTO   588
0584:  INCF   21,F
0585:  MOVWF  22
0586:  CALL   316
0587:  GOTO   57F
....................          lcd_gotoxy(1,1); 
0588:  MOVLW  01
0589:  MOVWF  23
058A:  MOVWF  24
058B:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
058C:  CLRF   21
058D:  MOVF   21,W
058E:  CALL   041
058F:  INCF   21,F
0590:  MOVWF  77
0591:  MOVWF  22
0592:  CALL   316
0593:  MOVLW  09
0594:  SUBWF  21,W
0595:  BTFSS  03.2
0596:  GOTO   58D
....................           lcd_gotoxy(1,2); 
0597:  MOVLW  01
0598:  MOVWF  23
0599:  MOVLW  02
059A:  MOVWF  24
059B:  CALL   304
....................          printf(lcd_putc,"ERROR_033: la variable X6_VT_05"); 
059C:  CLRF   21
059D:  MOVF   21,W
059E:  CALL   16F
059F:  INCF   21,F
05A0:  MOVWF  77
05A1:  MOVWF  22
05A2:  CALL   316
05A3:  MOVLW  1F
05A4:  SUBWF  21,W
05A5:  BTFSS  03.2
05A6:  GOTO   59D
....................          break; 
05A7:  GOTO   666
....................       } 
05A8:  GOTO   665
....................       //funcion de arduino lecturasEnBajadas6 
....................       else if (input(PIN_A0) == 0 && input(PIN_A1)==1 && input(PIN_A2)==0 && input(PIN_A3)==1) 
05A9:  BSF    03.5
05AA:  BSF    05.0
05AB:  BCF    03.5
05AC:  BTFSC  05.0
05AD:  GOTO   5E8
05AE:  BSF    03.5
05AF:  BSF    05.1
05B0:  BCF    03.5
05B1:  BTFSS  05.1
05B2:  GOTO   5E8
05B3:  BSF    03.5
05B4:  BSF    05.2
05B5:  BCF    03.5
05B6:  BTFSC  05.2
05B7:  GOTO   5E8
05B8:  BSF    03.5
05B9:  BSF    05.3
05BA:  BCF    03.5
05BB:  BTFSS  05.3
05BC:  GOTO   5E8
....................       { 
....................          lcd_putc("\f"); 
05BD:  CLRF   21
05BE:  MOVF   21,W
05BF:  CALL   00C
05C0:  IORLW  00
05C1:  BTFSC  03.2
05C2:  GOTO   5C7
05C3:  INCF   21,F
05C4:  MOVWF  22
05C5:  CALL   316
05C6:  GOTO   5BE
....................          lcd_gotoxy(1,1); 
05C7:  MOVLW  01
05C8:  MOVWF  23
05C9:  MOVWF  24
05CA:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
05CB:  CLRF   21
05CC:  MOVF   21,W
05CD:  CALL   041
05CE:  INCF   21,F
05CF:  MOVWF  77
05D0:  MOVWF  22
05D1:  CALL   316
05D2:  MOVLW  09
05D3:  SUBWF  21,W
05D4:  BTFSS  03.2
05D5:  GOTO   5CC
....................          lcd_gotoxy(1,2); 
05D6:  MOVLW  01
05D7:  MOVWF  23
05D8:  MOVLW  02
05D9:  MOVWF  24
05DA:  CALL   304
....................          printf(lcd_putc, "ERROR_014: la variable X7_VT_6"); 
05DB:  CLRF   21
05DC:  MOVF   21,W
05DD:  CALL   193
05DE:  INCF   21,F
05DF:  MOVWF  77
05E0:  MOVWF  22
05E1:  CALL   316
05E2:  MOVLW  1E
05E3:  SUBWF  21,W
05E4:  BTFSS  03.2
05E5:  GOTO   5DC
....................          break; 
05E6:  GOTO   666
....................       } 
05E7:  GOTO   665
....................       else if (input(PIN_A0) == 1 && input(PIN_A1)==1 && input(PIN_A2)==0 && input(PIN_A3)==1) 
05E8:  BSF    03.5
05E9:  BSF    05.0
05EA:  BCF    03.5
05EB:  BTFSS  05.0
05EC:  GOTO   627
05ED:  BSF    03.5
05EE:  BSF    05.1
05EF:  BCF    03.5
05F0:  BTFSS  05.1
05F1:  GOTO   627
05F2:  BSF    03.5
05F3:  BSF    05.2
05F4:  BCF    03.5
05F5:  BTFSC  05.2
05F6:  GOTO   627
05F7:  BSF    03.5
05F8:  BSF    05.3
05F9:  BCF    03.5
05FA:  BTFSS  05.3
05FB:  GOTO   627
....................       { 
....................          lcd_putc("\f"); 
05FC:  CLRF   21
05FD:  MOVF   21,W
05FE:  CALL   00C
05FF:  IORLW  00
0600:  BTFSC  03.2
0601:  GOTO   606
0602:  INCF   21,F
0603:  MOVWF  22
0604:  CALL   316
0605:  GOTO   5FD
....................          lcd_gotoxy(1,1); 
0606:  MOVLW  01
0607:  MOVWF  23
0608:  MOVWF  24
0609:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
060A:  CLRF   21
060B:  MOVF   21,W
060C:  CALL   041
060D:  INCF   21,F
060E:  MOVWF  77
060F:  MOVWF  22
0610:  CALL   316
0611:  MOVLW  09
0612:  SUBWF  21,W
0613:  BTFSS  03.2
0614:  GOTO   60B
....................          lcd_gotoxy(1,2); 
0615:  MOVLW  01
0616:  MOVWF  23
0617:  MOVLW  02
0618:  MOVWF  24
0619:  CALL   304
....................          printf(lcd_putc,"ERROR_024: la variable X7_VT_6"); 
061A:  CLRF   21
061B:  MOVF   21,W
061C:  CALL   1B6
061D:  INCF   21,F
061E:  MOVWF  77
061F:  MOVWF  22
0620:  CALL   316
0621:  MOVLW  1E
0622:  SUBWF  21,W
0623:  BTFSS  03.2
0624:  GOTO   61B
....................          break; 
0625:  GOTO   666
....................       } 
0626:  GOTO   665
....................       else if (input(PIN_A0) == 0 && input(PIN_A1)==0 && input(PIN_A2)==1 && input(PIN_A3)==1) 
0627:  BSF    03.5
0628:  BSF    05.0
0629:  BCF    03.5
062A:  BTFSC  05.0
062B:  GOTO   665
062C:  BSF    03.5
062D:  BSF    05.1
062E:  BCF    03.5
062F:  BTFSC  05.1
0630:  GOTO   665
0631:  BSF    03.5
0632:  BSF    05.2
0633:  BCF    03.5
0634:  BTFSS  05.2
0635:  GOTO   665
0636:  BSF    03.5
0637:  BSF    05.3
0638:  BCF    03.5
0639:  BTFSS  05.3
063A:  GOTO   665
....................       { 
....................          lcd_putc("\f"); 
063B:  CLRF   21
063C:  MOVF   21,W
063D:  CALL   00C
063E:  IORLW  00
063F:  BTFSC  03.2
0640:  GOTO   645
0641:  INCF   21,F
0642:  MOVWF  22
0643:  CALL   316
0644:  GOTO   63C
....................          lcd_gotoxy(1,1); 
0645:  MOVLW  01
0646:  MOVWF  23
0647:  MOVWF  24
0648:  CALL   304
....................          printf(lcd_putc, "Error en:"); 
0649:  CLRF   21
064A:  MOVF   21,W
064B:  CALL   041
064C:  INCF   21,F
064D:  MOVWF  77
064E:  MOVWF  22
064F:  CALL   316
0650:  MOVLW  09
0651:  SUBWF  21,W
0652:  BTFSS  03.2
0653:  GOTO   64A
....................           lcd_gotoxy(1,2); 
0654:  MOVLW  01
0655:  MOVWF  23
0656:  MOVLW  02
0657:  MOVWF  24
0658:  CALL   304
....................          printf(lcd_putc,"ERROR_034: la variable X6_VT_6"); 
0659:  CLRF   21
065A:  MOVF   21,W
065B:  CALL   1D9
065C:  INCF   21,F
065D:  MOVWF  77
065E:  MOVWF  22
065F:  CALL   316
0660:  MOVLW  1E
0661:  SUBWF  21,W
0662:  BTFSS  03.2
0663:  GOTO   65A
....................          break; 
0664:  GOTO   666
....................       } 
....................    }while(true); 
0665:  GOTO   353
.................... } 
0666:  SLEEP

Configuration Fuses:
   Word  1: 3F02   NOWDT PUT HS NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
