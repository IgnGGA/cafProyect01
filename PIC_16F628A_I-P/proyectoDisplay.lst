CCS PCM C Compiler, Version 5.008, 5967               13-may.-21 09:09

               Filename:   C:\Users\Ignacio\OneDrive\Documentos\002_CAF\cafProyect01\PIC_16F628A_I-P\proyectoDisplay.lst

               ROM used:   1555 words (76%)
                           Largest free fragment is 493
               RAM used:   9 (4%) at main() level
                           16 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   263
0003:  NOP
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  0C
0011:  RETLW  00
0012:  BCF    0A.0
0013:  BCF    0A.1
0014:  BCF    0A.2
0015:  ADDWF  02,F
0016:  RETLW  42
0017:  RETLW  61
0018:  RETLW  6E
0019:  RETLW  63
001A:  RETLW  6F
001B:  RETLW  20
001C:  RETLW  64
001D:  RETLW  65
001E:  RETLW  20
001F:  RETLW  50
0020:  RETLW  72
0021:  RETLW  75
0022:  RETLW  65
0023:  RETLW  62
0024:  RETLW  61
0025:  RETLW  73
0026:  RETLW  00
0027:  BCF    0A.0
0028:  BCF    0A.1
0029:  BCF    0A.2
002A:  ADDWF  02,F
002B:  RETLW  45
002C:  RETLW  52
002D:  RETLW  52
002E:  RETLW  4F
002F:  RETLW  52
0030:  RETLW  21
0031:  RETLW  21
0032:  RETLW  21
0033:  RETLW  00
0034:  BCF    0A.0
0035:  BCF    0A.1
0036:  BCF    0A.2
0037:  ADDWF  02,F
0038:  RETLW  45
0039:  RETLW  52
003A:  RETLW  52
003B:  RETLW  4F
003C:  RETLW  52
003D:  RETLW  5F
003E:  RETLW  30
003F:  RETLW  31
0040:  RETLW  31
0041:  RETLW  3A
0042:  RETLW  20
0043:  RETLW  58
0044:  RETLW  31
0045:  RETLW  5F
0046:  RETLW  56
0047:  RETLW  54
0048:  RETLW  5F
0049:  RETLW  30
004A:  RETLW  35
004B:  RETLW  00
004C:  BCF    0A.0
004D:  BCF    0A.1
004E:  BCF    0A.2
004F:  ADDWF  02,F
0050:  RETLW  45
0051:  RETLW  52
0052:  RETLW  52
0053:  RETLW  4F
0054:  RETLW  52
0055:  RETLW  5F
0056:  RETLW  30
0057:  RETLW  32
0058:  RETLW  31
0059:  RETLW  3A
005A:  RETLW  20
005B:  RETLW  58
005C:  RETLW  37
005D:  RETLW  5F
005E:  RETLW  56
005F:  RETLW  54
0060:  RETLW  5F
0061:  RETLW  30
0062:  RETLW  35
0063:  RETLW  00
0064:  BCF    0A.0
0065:  BCF    0A.1
0066:  BCF    0A.2
0067:  ADDWF  02,F
0068:  RETLW  45
0069:  RETLW  52
006A:  RETLW  52
006B:  RETLW  4F
006C:  RETLW  52
006D:  RETLW  5F
006E:  RETLW  30
006F:  RETLW  33
0070:  RETLW  31
0071:  RETLW  3A
0072:  RETLW  20
0073:  RETLW  58
0074:  RETLW  36
0075:  RETLW  5F
0076:  RETLW  56
0077:  RETLW  54
0078:  RETLW  5F
0079:  RETLW  30
007A:  RETLW  35
007B:  RETLW  00
007C:  BCF    0A.0
007D:  BCF    0A.1
007E:  BCF    0A.2
007F:  ADDWF  02,F
0080:  RETLW  45
0081:  RETLW  52
0082:  RETLW  52
0083:  RETLW  4F
0084:  RETLW  52
0085:  RETLW  5F
0086:  RETLW  30
0087:  RETLW  31
0088:  RETLW  32
0089:  RETLW  3A
008A:  RETLW  20
008B:  RETLW  58
008C:  RETLW  31
008D:  RETLW  5F
008E:  RETLW  56
008F:  RETLW  54
0090:  RETLW  5F
0091:  RETLW  36
0092:  RETLW  00
0093:  BCF    0A.0
0094:  BCF    0A.1
0095:  BCF    0A.2
0096:  ADDWF  02,F
0097:  RETLW  45
0098:  RETLW  52
0099:  RETLW  52
009A:  RETLW  4F
009B:  RETLW  52
009C:  RETLW  5F
009D:  RETLW  30
009E:  RETLW  32
009F:  RETLW  32
00A0:  RETLW  3A
00A1:  RETLW  20
00A2:  RETLW  58
00A3:  RETLW  37
00A4:  RETLW  5F
00A5:  RETLW  56
00A6:  RETLW  54
00A7:  RETLW  5F
00A8:  RETLW  36
00A9:  RETLW  00
00AA:  BCF    0A.0
00AB:  BCF    0A.1
00AC:  BCF    0A.2
00AD:  ADDWF  02,F
00AE:  RETLW  45
00AF:  RETLW  52
00B0:  RETLW  52
00B1:  RETLW  4F
00B2:  RETLW  52
00B3:  RETLW  5F
00B4:  RETLW  30
00B5:  RETLW  33
00B6:  RETLW  32
00B7:  RETLW  3A
00B8:  RETLW  20
00B9:  RETLW  58
00BA:  RETLW  36
00BB:  RETLW  5F
00BC:  RETLW  56
00BD:  RETLW  54
00BE:  RETLW  5F
00BF:  RETLW  36
00C0:  RETLW  00
00C1:  BCF    0A.0
00C2:  BCF    0A.1
00C3:  BCF    0A.2
00C4:  ADDWF  02,F
00C5:  RETLW  45
00C6:  RETLW  52
00C7:  RETLW  52
00C8:  RETLW  4F
00C9:  RETLW  52
00CA:  RETLW  5F
00CB:  RETLW  30
00CC:  RETLW  31
00CD:  RETLW  33
00CE:  RETLW  3A
00CF:  RETLW  20
00D0:  RETLW  58
00D1:  RETLW  31
00D2:  RETLW  5F
00D3:  RETLW  56
00D4:  RETLW  54
00D5:  RETLW  5F
00D6:  RETLW  30
00D7:  RETLW  35
00D8:  RETLW  00
00D9:  BCF    0A.0
00DA:  BCF    0A.1
00DB:  BCF    0A.2
00DC:  ADDWF  02,F
00DD:  RETLW  45
00DE:  RETLW  52
00DF:  RETLW  52
00E0:  RETLW  4F
00E1:  RETLW  52
00E2:  RETLW  5F
00E3:  RETLW  30
00E4:  RETLW  32
00E5:  RETLW  33
00E6:  RETLW  3A
00E7:  RETLW  20
00E8:  RETLW  58
00E9:  RETLW  37
00EA:  RETLW  5F
00EB:  RETLW  56
00EC:  RETLW  54
00ED:  RETLW  5F
00EE:  RETLW  30
00EF:  RETLW  35
00F0:  RETLW  00
00F1:  BCF    0A.0
00F2:  BCF    0A.1
00F3:  BCF    0A.2
00F4:  ADDLW  F8
00F5:  BTFSC  03.0
00F6:  INCF   0A,F
00F7:  MOVWF  02
00F8:  RETLW  45
00F9:  RETLW  52
00FA:  RETLW  52
00FB:  RETLW  4F
00FC:  RETLW  52
00FD:  RETLW  5F
00FE:  RETLW  30
00FF:  RETLW  33
0100:  RETLW  33
0101:  RETLW  3A
0102:  RETLW  20
0103:  RETLW  58
0104:  RETLW  36
0105:  RETLW  5F
0106:  RETLW  56
0107:  RETLW  54
0108:  RETLW  5F
0109:  RETLW  30
010A:  RETLW  35
010B:  RETLW  00
010C:  BSF    0A.0
010D:  BCF    0A.1
010E:  BCF    0A.2
010F:  ADDWF  02,F
0110:  RETLW  45
0111:  RETLW  52
0112:  RETLW  52
0113:  RETLW  4F
0114:  RETLW  52
0115:  RETLW  5F
0116:  RETLW  30
0117:  RETLW  31
0118:  RETLW  34
0119:  RETLW  3A
011A:  RETLW  20
011B:  RETLW  58
011C:  RETLW  31
011D:  RETLW  5F
011E:  RETLW  56
011F:  RETLW  54
0120:  RETLW  5F
0121:  RETLW  36
0122:  RETLW  00
0123:  BSF    0A.0
0124:  BCF    0A.1
0125:  BCF    0A.2
0126:  ADDWF  02,F
0127:  RETLW  45
0128:  RETLW  52
0129:  RETLW  52
012A:  RETLW  4F
012B:  RETLW  52
012C:  RETLW  5F
012D:  RETLW  30
012E:  RETLW  32
012F:  RETLW  34
0130:  RETLW  3A
0131:  RETLW  20
0132:  RETLW  58
0133:  RETLW  37
0134:  RETLW  5F
0135:  RETLW  56
0136:  RETLW  54
0137:  RETLW  5F
0138:  RETLW  36
0139:  RETLW  00
013A:  BSF    0A.0
013B:  BCF    0A.1
013C:  BCF    0A.2
013D:  ADDWF  02,F
013E:  RETLW  45
013F:  RETLW  52
0140:  RETLW  52
0141:  RETLW  4F
0142:  RETLW  52
0143:  RETLW  5F
0144:  RETLW  30
0145:  RETLW  33
0146:  RETLW  34
0147:  RETLW  3A
0148:  RETLW  20
0149:  RETLW  58
014A:  RETLW  36
014B:  RETLW  5F
014C:  RETLW  56
014D:  RETLW  54
014E:  RETLW  5F
014F:  RETLW  36
0150:  RETLW  00
0151:  BSF    0A.0
0152:  BCF    0A.1
0153:  BCF    0A.2
0154:  ADDWF  02,F
0155:  RETLW  45
0156:  RETLW  52
0157:  RETLW  52
0158:  RETLW  4F
0159:  RETLW  52
015A:  RETLW  5F
015B:  RETLW  30
015C:  RETLW  30
015D:  RETLW  31
015E:  RETLW  3A
015F:  RETLW  20
0160:  RETLW  50
0161:  RETLW  72
0162:  RETLW  65
0163:  RETLW  70
0164:  RETLW  61
0165:  RETLW  72
0166:  RETLW  61
0167:  RETLW  63
0168:  RETLW  69
0169:  RETLW  6F
016A:  RETLW  6E
016B:  RETLW  20
016C:  RETLW  58
016D:  RETLW  31
016E:  RETLW  00
016F:  BSF    0A.0
0170:  BCF    0A.1
0171:  BCF    0A.2
0172:  ADDWF  02,F
0173:  RETLW  45
0174:  RETLW  52
0175:  RETLW  52
0176:  RETLW  4F
0177:  RETLW  52
0178:  RETLW  5F
0179:  RETLW  30
017A:  RETLW  30
017B:  RETLW  32
017C:  RETLW  3A
017D:  RETLW  20
017E:  RETLW  50
017F:  RETLW  72
0180:  RETLW  65
0181:  RETLW  70
0182:  RETLW  61
0183:  RETLW  72
0184:  RETLW  61
0185:  RETLW  63
0186:  RETLW  69
0187:  RETLW  6F
0188:  RETLW  6E
0189:  RETLW  20
018A:  RETLW  58
018B:  RETLW  36
018C:  RETLW  00
....................  
.................... #list 
....................  
.................... #use delay(clock = 4000000) /* OSCILADOR INTERNO */ //No aplica, ya que se activo el cristal interno 
018D:  MOVLW  23
018E:  MOVWF  04
018F:  BCF    03.7
0190:  MOVF   00,W
0191:  BTFSC  03.2
0192:  GOTO   1A1
0193:  MOVLW  01
0194:  MOVWF  78
0195:  CLRF   77
0196:  DECFSZ 77,F
0197:  GOTO   196
0198:  DECFSZ 78,F
0199:  GOTO   195
019A:  MOVLW  4A
019B:  MOVWF  77
019C:  DECFSZ 77,F
019D:  GOTO   19C
019E:  GOTO   19F
019F:  DECFSZ 00,F
01A0:  GOTO   193
01A1:  RETURN
.................... #FUSES NOWDT                                        /* No Watch Dog Timer*/ 
.................... //#FUSES HS                     /* High speed Osc (> 4mhz)*/                     //Se usa con un cristal mayor al de 4Mhz, se recomienda usar el cristal interno 
.................... #FUSES PUT        /* Power Up Timer*/ 
.................... #FUSES NOPROTECT  /* Code not protected from reading*/ 
.................... #FUSES NOBROWNOUT /* No brownout reset*/ 
.................... #FUSES NOMCLR     /* Master Clear pin disabled*/ 
.................... #FUSES NOLVP      /* No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O*/ 
.................... #FUSES NOCPD 
.................... #FUSES INTRC //Activacion uso cristal interno 
....................  
.................... #include <lcd.c>              /*libreria para usar el lcd*/ 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
01BA:  MOVLW  0F
01BB:  BSF    03.5
01BC:  ANDWF  06,W
01BD:  IORLW  F0
01BE:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
01BF:  BCF    03.5
01C0:  BSF    06.2
....................    delay_cycles(1); 
01C1:  NOP
....................    lcd_output_enable(1); 
01C2:  BSF    06.0
....................    delay_cycles(1); 
01C3:  NOP
....................    high = lcd_read_nibble(); 
01C4:  CALL   1AE
01C5:  MOVF   78,W
01C6:  MOVWF  2A
....................        
....................    lcd_output_enable(0); 
01C7:  BCF    06.0
....................    delay_cycles(1); 
01C8:  NOP
....................    lcd_output_enable(1); 
01C9:  BSF    06.0
....................    delay_us(1); 
01CA:  NOP
....................    low = lcd_read_nibble(); 
01CB:  CALL   1AE
01CC:  MOVF   78,W
01CD:  MOVWF  29
....................        
....................    lcd_output_enable(0); 
01CE:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01CF:  MOVLW  0F
01D0:  BSF    03.5
01D1:  ANDWF  06,W
01D2:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
01D3:  BCF    03.5
01D4:  SWAPF  2A,W
01D5:  MOVWF  77
01D6:  MOVLW  F0
01D7:  ANDWF  77,F
01D8:  MOVF   77,W
01D9:  IORWF  29,W
01DA:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
01AE:  MOVF   06,W
01AF:  MOVWF  77
01B0:  SWAPF  06,W
01B1:  ANDLW  0F
01B2:  MOVWF  78
....................   #endif 
01B3:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
01A2:  SWAPF  2A,W
01A3:  ANDLW  F0
01A4:  MOVWF  77
01A5:  MOVLW  0F
01A6:  ANDWF  06,W
01A7:  IORWF  77,W
01A8:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
01A9:  NOP
....................    lcd_output_enable(1); 
01AA:  BSF    06.0
....................    delay_us(2); 
01AB:  GOTO   1AC
....................    lcd_output_enable(0); 
01AC:  BCF    06.0
01AD:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
01B4:  BSF    03.5
01B5:  BCF    06.0
....................    lcd_rs_tris(); 
01B6:  BCF    06.1
....................    lcd_rw_tris(); 
01B7:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
01B8:  BCF    03.5
01B9:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
01DB:  MOVF   78,W
01DC:  MOVWF  29
01DD:  BTFSC  29.7
01DE:  GOTO   1BA
....................    lcd_output_rs(address); 
01DF:  BTFSS  27.0
01E0:  BCF    06.1
01E1:  BTFSC  27.0
01E2:  BSF    06.1
....................    delay_cycles(1); 
01E3:  NOP
....................    lcd_output_rw(0); 
01E4:  BCF    06.2
....................    delay_cycles(1); 
01E5:  NOP
....................    lcd_output_enable(0); 
01E6:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
01E7:  SWAPF  28,W
01E8:  MOVWF  29
01E9:  MOVLW  0F
01EA:  ANDWF  29,F
01EB:  MOVF   29,W
01EC:  MOVWF  2A
01ED:  CALL   1A2
....................    lcd_send_nibble(n & 0xf); 
01EE:  MOVF   28,W
01EF:  ANDLW  0F
01F0:  MOVWF  29
01F1:  MOVWF  2A
01F2:  CALL   1A2
01F3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01F4:  MOVLW  0F
01F5:  BSF    03.5
01F6:  ANDWF  06,W
01F7:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
01F8:  BCF    06.0
....................    lcd_rs_tris(); 
01F9:  BCF    06.1
....................    lcd_rw_tris(); 
01FA:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
01FB:  BCF    03.5
01FC:  BCF    06.1
....................    lcd_output_rw(0); 
01FD:  BCF    06.2
....................    lcd_output_enable(0); 
01FE:  BCF    06.0
....................      
....................    delay_ms(15); 
01FF:  MOVLW  0F
0200:  MOVWF  23
0201:  CALL   18D
....................    for(i=1;i<=3;++i) 
0202:  MOVLW  01
0203:  MOVWF  21
0204:  MOVF   21,W
0205:  SUBLW  03
0206:  BTFSS  03.0
0207:  GOTO   210
....................    { 
....................        lcd_send_nibble(3); 
0208:  MOVLW  03
0209:  MOVWF  2A
020A:  CALL   1A2
....................        delay_ms(5); 
020B:  MOVLW  05
020C:  MOVWF  23
020D:  CALL   18D
020E:  INCF   21,F
020F:  GOTO   204
....................    } 
....................     
....................    lcd_send_nibble(2); 
0210:  MOVLW  02
0211:  MOVWF  2A
0212:  CALL   1A2
....................    delay_ms(5); 
0213:  MOVLW  05
0214:  MOVWF  23
0215:  CALL   18D
....................    for(i=0;i<=3;++i) 
0216:  CLRF   21
0217:  MOVF   21,W
0218:  SUBLW  03
0219:  BTFSS  03.0
021A:  GOTO   224
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
021B:  MOVF   21,W
021C:  CALL   004
021D:  MOVWF  22
021E:  CLRF   27
021F:  MOVF   22,W
0220:  MOVWF  28
0221:  CALL   1B4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0222:  INCF   21,F
0223:  GOTO   217
0224:  GOTO   279 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0225:  DECFSZ 24,W
0226:  GOTO   228
0227:  GOTO   22B
....................       address=LCD_LINE_TWO; 
0228:  MOVLW  40
0229:  MOVWF  25
022A:  GOTO   22C
....................    else 
....................       address=0; 
022B:  CLRF   25
....................       
....................    address+=x-1; 
022C:  MOVLW  01
022D:  SUBWF  23,W
022E:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address); 
022F:  MOVF   25,W
0230:  IORLW  80
0231:  MOVWF  26
0232:  CLRF   27
0233:  MOVF   26,W
0234:  MOVWF  28
0235:  CALL   1B4
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0236:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0237:  MOVF   22,W
0238:  XORLW  07
0239:  BTFSC  03.2
023A:  GOTO   245
023B:  XORLW  0B
023C:  BTFSC  03.2
023D:  GOTO   24A
023E:  XORLW  06
023F:  BTFSC  03.2
0240:  GOTO   252
0241:  XORLW  02
0242:  BTFSC  03.2
0243:  GOTO   258
0244:  GOTO   25D
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0245:  MOVLW  01
0246:  MOVWF  23
0247:  MOVWF  24
0248:  CALL   225
0249:  GOTO   262
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
024A:  CLRF   27
024B:  MOVLW  01
024C:  MOVWF  28
024D:  CALL   1B4
....................                      delay_ms(2); 
024E:  MOVLW  02
024F:  MOVWF  23
0250:  CALL   18D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0251:  GOTO   262
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0252:  MOVLW  01
0253:  MOVWF  23
0254:  MOVLW  02
0255:  MOVWF  24
0256:  CALL   225
0257:  GOTO   262
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0258:  CLRF   27
0259:  MOVLW  10
025A:  MOVWF  28
025B:  CALL   1B4
025C:  GOTO   262
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
025D:  MOVLW  01
025E:  MOVWF  27
025F:  MOVF   22,W
0260:  MOVWF  28
0261:  CALL   1B4
....................      #endif 
....................    } 
0262:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define LCD_ENABLE_PIN PIN_B0 /* ASIGNAMOS EL PIN "B0" COMO SALIDA PARA E */ 
.................... #define LCD_RS_PIN PIN_B1     /* ASIGNAMOS EL PIN "B1" COMO SALIDA PARA RS*/ 
.................... #define LCD_RW_PIN PIN_B2     /* ASIGNAMOS EL PIN "B2" COMO SALIDA PARA RW*/ 
.................... #define LCD_DATA4 PIN_B4      /* ASIGNAMOS EL PIN "B4" COMO SALIDA PARA D4*/ 
.................... #define LCD_DATA5 PIN_B5      /* ASIGNAMOS EL PIN "B5" COMO SALIDA PARA D5*/ 
.................... #define LCD_DATA6 PIN_B6      /* ASIGNAMOS EL PIN "B6" COMO SALIDA PARA D6*/ 
.................... #define LCD_DATA7 PIN_B7      /* ASIGNAMOS EL PIN "B7" COMO SALIDA PARA D7*/ 
....................  
.................... void main() 
0263:  MOVF   03,W
0264:  ANDLW  1F
0265:  MOVWF  03
0266:  MOVLW  07
0267:  MOVWF  1F
0268:  BCF    03.7
.................... { 
....................    output_high(pin_a4); 
0269:  BSF    03.5
026A:  BCF    05.4
026B:  BCF    03.5
026C:  BSF    05.4
....................    delay_ms(500); 
026D:  MOVLW  02
026E:  MOVWF  21
026F:  MOVLW  FA
0270:  MOVWF  23
0271:  CALL   18D
0272:  DECFSZ 21,F
0273:  GOTO   26F
....................    output_low(pin_a4); 
0274:  BSF    03.5
0275:  BCF    05.4
0276:  BCF    03.5
0277:  BCF    05.4
....................    lcd_init(); 
0278:  GOTO   1F4
....................    lcd_putc("\f"); 
0279:  CLRF   21
027A:  MOVF   21,W
027B:  CALL   00C
027C:  IORLW  00
027D:  BTFSC  03.2
027E:  GOTO   283
027F:  INCF   21,F
0280:  MOVWF  22
0281:  CALL   237
0282:  GOTO   27A
....................    do 
....................    { 
....................       lcd_gotoxy(1, 1); 
0283:  MOVLW  01
0284:  MOVWF  23
0285:  MOVWF  24
0286:  CALL   225
....................       printf(lcd_putc, "Banco de Pruebas"); 
0287:  CLRF   21
0288:  MOVF   21,W
0289:  CALL   012
028A:  INCF   21,F
028B:  MOVWF  77
028C:  MOVWF  22
028D:  CALL   237
028E:  MOVLW  10
028F:  SUBWF  21,W
0290:  BTFSS  03.2
0291:  GOTO   288
....................       lcd_gotoxy(1, 2); 
0292:  MOVLW  01
0293:  MOVWF  23
0294:  MOVLW  02
0295:  MOVWF  24
0296:  CALL   225
....................       printf(lcd_putc, "EVR"); 
0297:  MOVLW  45
0298:  MOVWF  22
0299:  CALL   237
029A:  MOVLW  56
029B:  MOVWF  22
029C:  CALL   237
029D:  MOVLW  52
029E:  MOVWF  22
029F:  CALL   237
....................       //funcion de arduino lecturasEnSubida05 
....................       if (input(PIN_A0) == 1 && input(PIN_A1) == 0 && input(PIN_A2) == 0 && input(PIN_A3) == 0) 
02A0:  BSF    03.5
02A1:  BSF    05.0
02A2:  BCF    03.5
02A3:  BTFSS  05.0
02A4:  GOTO   2DF
02A5:  BSF    03.5
02A6:  BSF    05.1
02A7:  BCF    03.5
02A8:  BTFSC  05.1
02A9:  GOTO   2DF
02AA:  BSF    03.5
02AB:  BSF    05.2
02AC:  BCF    03.5
02AD:  BTFSC  05.2
02AE:  GOTO   2DF
02AF:  BSF    03.5
02B0:  BSF    05.3
02B1:  BCF    03.5
02B2:  BTFSC  05.3
02B3:  GOTO   2DF
....................       { 
....................          lcd_putc("\f"); 
02B4:  CLRF   21
02B5:  MOVF   21,W
02B6:  CALL   00C
02B7:  IORLW  00
02B8:  BTFSC  03.2
02B9:  GOTO   2BE
02BA:  INCF   21,F
02BB:  MOVWF  22
02BC:  CALL   237
02BD:  GOTO   2B5
....................          lcd_gotoxy(1, 1); 
02BE:  MOVLW  01
02BF:  MOVWF  23
02C0:  MOVWF  24
02C1:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
02C2:  CLRF   21
02C3:  MOVF   21,W
02C4:  CALL   027
02C5:  INCF   21,F
02C6:  MOVWF  77
02C7:  MOVWF  22
02C8:  CALL   237
02C9:  MOVLW  08
02CA:  SUBWF  21,W
02CB:  BTFSS  03.2
02CC:  GOTO   2C3
....................          lcd_gotoxy(1, 2); 
02CD:  MOVLW  01
02CE:  MOVWF  23
02CF:  MOVLW  02
02D0:  MOVWF  24
02D1:  CALL   225
....................          printf(lcd_putc, "ERROR_011: X1_VT_05"); 
02D2:  CLRF   21
02D3:  MOVF   21,W
02D4:  CALL   034
02D5:  INCF   21,F
02D6:  MOVWF  77
02D7:  MOVWF  22
02D8:  CALL   237
02D9:  MOVLW  13
02DA:  SUBWF  21,W
02DB:  BTFSS  03.2
02DC:  GOTO   2D3
....................          break; 
02DD:  GOTO   612
....................       } 
02DE:  GOTO   611
....................       else if (input(PIN_A0) == 0 && input(PIN_A1) == 1 && input(PIN_A2) == 0 && input(PIN_A3) == 0) 
02DF:  BSF    03.5
02E0:  BSF    05.0
02E1:  BCF    03.5
02E2:  BTFSC  05.0
02E3:  GOTO   31E
02E4:  BSF    03.5
02E5:  BSF    05.1
02E6:  BCF    03.5
02E7:  BTFSS  05.1
02E8:  GOTO   31E
02E9:  BSF    03.5
02EA:  BSF    05.2
02EB:  BCF    03.5
02EC:  BTFSC  05.2
02ED:  GOTO   31E
02EE:  BSF    03.5
02EF:  BSF    05.3
02F0:  BCF    03.5
02F1:  BTFSC  05.3
02F2:  GOTO   31E
....................       { 
....................          lcd_putc("\f"); 
02F3:  CLRF   21
02F4:  MOVF   21,W
02F5:  CALL   00C
02F6:  IORLW  00
02F7:  BTFSC  03.2
02F8:  GOTO   2FD
02F9:  INCF   21,F
02FA:  MOVWF  22
02FB:  CALL   237
02FC:  GOTO   2F4
....................          lcd_gotoxy(1, 1); 
02FD:  MOVLW  01
02FE:  MOVWF  23
02FF:  MOVWF  24
0300:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
0301:  CLRF   21
0302:  MOVF   21,W
0303:  CALL   027
0304:  INCF   21,F
0305:  MOVWF  77
0306:  MOVWF  22
0307:  CALL   237
0308:  MOVLW  08
0309:  SUBWF  21,W
030A:  BTFSS  03.2
030B:  GOTO   302
....................          lcd_gotoxy(1, 2); 
030C:  MOVLW  01
030D:  MOVWF  23
030E:  MOVLW  02
030F:  MOVWF  24
0310:  CALL   225
....................          printf(lcd_putc, "ERROR_021: X7_VT_05"); 
0311:  CLRF   21
0312:  MOVF   21,W
0313:  CALL   04C
0314:  INCF   21,F
0315:  MOVWF  77
0316:  MOVWF  22
0317:  CALL   237
0318:  MOVLW  13
0319:  SUBWF  21,W
031A:  BTFSS  03.2
031B:  GOTO   312
....................          break; 
031C:  GOTO   612
....................       } 
031D:  GOTO   611
....................       else if (input(PIN_A0) == 1 && input(PIN_A1) == 1 && input(PIN_A2) == 0 && input(PIN_A3) == 0) 
031E:  BSF    03.5
031F:  BSF    05.0
0320:  BCF    03.5
0321:  BTFSS  05.0
0322:  GOTO   35D
0323:  BSF    03.5
0324:  BSF    05.1
0325:  BCF    03.5
0326:  BTFSS  05.1
0327:  GOTO   35D
0328:  BSF    03.5
0329:  BSF    05.2
032A:  BCF    03.5
032B:  BTFSC  05.2
032C:  GOTO   35D
032D:  BSF    03.5
032E:  BSF    05.3
032F:  BCF    03.5
0330:  BTFSC  05.3
0331:  GOTO   35D
....................       { 
....................          lcd_putc("\f"); 
0332:  CLRF   21
0333:  MOVF   21,W
0334:  CALL   00C
0335:  IORLW  00
0336:  BTFSC  03.2
0337:  GOTO   33C
0338:  INCF   21,F
0339:  MOVWF  22
033A:  CALL   237
033B:  GOTO   333
....................          lcd_gotoxy(1, 1); 
033C:  MOVLW  01
033D:  MOVWF  23
033E:  MOVWF  24
033F:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
0340:  CLRF   21
0341:  MOVF   21,W
0342:  CALL   027
0343:  INCF   21,F
0344:  MOVWF  77
0345:  MOVWF  22
0346:  CALL   237
0347:  MOVLW  08
0348:  SUBWF  21,W
0349:  BTFSS  03.2
034A:  GOTO   341
....................          lcd_gotoxy(1, 2); 
034B:  MOVLW  01
034C:  MOVWF  23
034D:  MOVLW  02
034E:  MOVWF  24
034F:  CALL   225
....................          printf(lcd_putc, "ERROR_031: X6_VT_05"); 
0350:  CLRF   21
0351:  MOVF   21,W
0352:  CALL   064
0353:  INCF   21,F
0354:  MOVWF  77
0355:  MOVWF  22
0356:  CALL   237
0357:  MOVLW  13
0358:  SUBWF  21,W
0359:  BTFSS  03.2
035A:  GOTO   351
....................          break; 
035B:  GOTO   612
....................       } 
035C:  GOTO   611
....................       //funcion de arduino lecturasEnSubida6 
....................       else if (input(PIN_A0) == 0 && input(PIN_A1) == 0 && input(PIN_A2) == 1 && input(PIN_A3) == 0) 
035D:  BSF    03.5
035E:  BSF    05.0
035F:  BCF    03.5
0360:  BTFSC  05.0
0361:  GOTO   39C
0362:  BSF    03.5
0363:  BSF    05.1
0364:  BCF    03.5
0365:  BTFSC  05.1
0366:  GOTO   39C
0367:  BSF    03.5
0368:  BSF    05.2
0369:  BCF    03.5
036A:  BTFSS  05.2
036B:  GOTO   39C
036C:  BSF    03.5
036D:  BSF    05.3
036E:  BCF    03.5
036F:  BTFSC  05.3
0370:  GOTO   39C
....................       { 
....................          lcd_putc("\f"); 
0371:  CLRF   21
0372:  MOVF   21,W
0373:  CALL   00C
0374:  IORLW  00
0375:  BTFSC  03.2
0376:  GOTO   37B
0377:  INCF   21,F
0378:  MOVWF  22
0379:  CALL   237
037A:  GOTO   372
....................          lcd_gotoxy(1, 1); 
037B:  MOVLW  01
037C:  MOVWF  23
037D:  MOVWF  24
037E:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
037F:  CLRF   21
0380:  MOVF   21,W
0381:  CALL   027
0382:  INCF   21,F
0383:  MOVWF  77
0384:  MOVWF  22
0385:  CALL   237
0386:  MOVLW  08
0387:  SUBWF  21,W
0388:  BTFSS  03.2
0389:  GOTO   380
....................          lcd_gotoxy(1, 2); 
038A:  MOVLW  01
038B:  MOVWF  23
038C:  MOVLW  02
038D:  MOVWF  24
038E:  CALL   225
....................          printf(lcd_putc, "ERROR_012: X1_VT_6"); 
038F:  CLRF   21
0390:  MOVF   21,W
0391:  CALL   07C
0392:  INCF   21,F
0393:  MOVWF  77
0394:  MOVWF  22
0395:  CALL   237
0396:  MOVLW  12
0397:  SUBWF  21,W
0398:  BTFSS  03.2
0399:  GOTO   390
....................          break; 
039A:  GOTO   612
....................       } 
039B:  GOTO   611
....................       else if (input(PIN_A0) == 1 && input(PIN_A1) == 0 && input(PIN_A2) == 1 && input(PIN_A3) == 0) 
039C:  BSF    03.5
039D:  BSF    05.0
039E:  BCF    03.5
039F:  BTFSS  05.0
03A0:  GOTO   3DB
03A1:  BSF    03.5
03A2:  BSF    05.1
03A3:  BCF    03.5
03A4:  BTFSC  05.1
03A5:  GOTO   3DB
03A6:  BSF    03.5
03A7:  BSF    05.2
03A8:  BCF    03.5
03A9:  BTFSS  05.2
03AA:  GOTO   3DB
03AB:  BSF    03.5
03AC:  BSF    05.3
03AD:  BCF    03.5
03AE:  BTFSC  05.3
03AF:  GOTO   3DB
....................       { 
....................          lcd_putc("\f"); 
03B0:  CLRF   21
03B1:  MOVF   21,W
03B2:  CALL   00C
03B3:  IORLW  00
03B4:  BTFSC  03.2
03B5:  GOTO   3BA
03B6:  INCF   21,F
03B7:  MOVWF  22
03B8:  CALL   237
03B9:  GOTO   3B1
....................          lcd_gotoxy(1, 1); 
03BA:  MOVLW  01
03BB:  MOVWF  23
03BC:  MOVWF  24
03BD:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
03BE:  CLRF   21
03BF:  MOVF   21,W
03C0:  CALL   027
03C1:  INCF   21,F
03C2:  MOVWF  77
03C3:  MOVWF  22
03C4:  CALL   237
03C5:  MOVLW  08
03C6:  SUBWF  21,W
03C7:  BTFSS  03.2
03C8:  GOTO   3BF
....................          lcd_gotoxy(1, 2); 
03C9:  MOVLW  01
03CA:  MOVWF  23
03CB:  MOVLW  02
03CC:  MOVWF  24
03CD:  CALL   225
....................          printf(lcd_putc, "ERROR_022: X7_VT_6"); 
03CE:  CLRF   21
03CF:  MOVF   21,W
03D0:  CALL   093
03D1:  INCF   21,F
03D2:  MOVWF  77
03D3:  MOVWF  22
03D4:  CALL   237
03D5:  MOVLW  12
03D6:  SUBWF  21,W
03D7:  BTFSS  03.2
03D8:  GOTO   3CF
....................          break; 
03D9:  GOTO   612
....................       } 
03DA:  GOTO   611
....................       else if (input(PIN_A0) == 0 && input(PIN_A1) == 1 && input(PIN_A2) == 1 && input(PIN_A3) == 0) 
03DB:  BSF    03.5
03DC:  BSF    05.0
03DD:  BCF    03.5
03DE:  BTFSC  05.0
03DF:  GOTO   41A
03E0:  BSF    03.5
03E1:  BSF    05.1
03E2:  BCF    03.5
03E3:  BTFSS  05.1
03E4:  GOTO   41A
03E5:  BSF    03.5
03E6:  BSF    05.2
03E7:  BCF    03.5
03E8:  BTFSS  05.2
03E9:  GOTO   41A
03EA:  BSF    03.5
03EB:  BSF    05.3
03EC:  BCF    03.5
03ED:  BTFSC  05.3
03EE:  GOTO   41A
....................       { 
....................          lcd_putc("\f"); 
03EF:  CLRF   21
03F0:  MOVF   21,W
03F1:  CALL   00C
03F2:  IORLW  00
03F3:  BTFSC  03.2
03F4:  GOTO   3F9
03F5:  INCF   21,F
03F6:  MOVWF  22
03F7:  CALL   237
03F8:  GOTO   3F0
....................          lcd_gotoxy(1, 1); 
03F9:  MOVLW  01
03FA:  MOVWF  23
03FB:  MOVWF  24
03FC:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
03FD:  CLRF   21
03FE:  MOVF   21,W
03FF:  CALL   027
0400:  INCF   21,F
0401:  MOVWF  77
0402:  MOVWF  22
0403:  CALL   237
0404:  MOVLW  08
0405:  SUBWF  21,W
0406:  BTFSS  03.2
0407:  GOTO   3FE
....................          lcd_gotoxy(1, 2); 
0408:  MOVLW  01
0409:  MOVWF  23
040A:  MOVLW  02
040B:  MOVWF  24
040C:  CALL   225
....................          printf(lcd_putc, "ERROR_032: X6_VT_6"); 
040D:  CLRF   21
040E:  MOVF   21,W
040F:  CALL   0AA
0410:  INCF   21,F
0411:  MOVWF  77
0412:  MOVWF  22
0413:  CALL   237
0414:  MOVLW  12
0415:  SUBWF  21,W
0416:  BTFSS  03.2
0417:  GOTO   40E
....................          break; 
0418:  GOTO   612
....................       } 
0419:  GOTO   611
....................       //funcion de arduino lecturasEnBajada05 
....................       else if (input(PIN_A0) == 1 && input(PIN_A1) == 1 && input(PIN_A2) == 1 && input(PIN_A3) == 0) 
041A:  BSF    03.5
041B:  BSF    05.0
041C:  BCF    03.5
041D:  BTFSS  05.0
041E:  GOTO   459
041F:  BSF    03.5
0420:  BSF    05.1
0421:  BCF    03.5
0422:  BTFSS  05.1
0423:  GOTO   459
0424:  BSF    03.5
0425:  BSF    05.2
0426:  BCF    03.5
0427:  BTFSS  05.2
0428:  GOTO   459
0429:  BSF    03.5
042A:  BSF    05.3
042B:  BCF    03.5
042C:  BTFSC  05.3
042D:  GOTO   459
....................       { 
....................          lcd_putc("\f"); 
042E:  CLRF   21
042F:  MOVF   21,W
0430:  CALL   00C
0431:  IORLW  00
0432:  BTFSC  03.2
0433:  GOTO   438
0434:  INCF   21,F
0435:  MOVWF  22
0436:  CALL   237
0437:  GOTO   42F
....................          lcd_gotoxy(1, 1); 
0438:  MOVLW  01
0439:  MOVWF  23
043A:  MOVWF  24
043B:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
043C:  CLRF   21
043D:  MOVF   21,W
043E:  CALL   027
043F:  INCF   21,F
0440:  MOVWF  77
0441:  MOVWF  22
0442:  CALL   237
0443:  MOVLW  08
0444:  SUBWF  21,W
0445:  BTFSS  03.2
0446:  GOTO   43D
....................          lcd_gotoxy(1, 2); 
0447:  MOVLW  01
0448:  MOVWF  23
0449:  MOVLW  02
044A:  MOVWF  24
044B:  CALL   225
....................          printf(lcd_putc, "ERROR_013: X1_VT_05"); 
044C:  CLRF   21
044D:  MOVF   21,W
044E:  CALL   0C1
044F:  INCF   21,F
0450:  MOVWF  77
0451:  MOVWF  22
0452:  CALL   237
0453:  MOVLW  13
0454:  SUBWF  21,W
0455:  BTFSS  03.2
0456:  GOTO   44D
....................          break; 
0457:  GOTO   612
....................       } 
0458:  GOTO   611
....................       else if (input(PIN_A0) == 0 && input(PIN_A1) == 0 && input(PIN_A2) == 0 && input(PIN_A3) == 1) 
0459:  BSF    03.5
045A:  BSF    05.0
045B:  BCF    03.5
045C:  BTFSC  05.0
045D:  GOTO   498
045E:  BSF    03.5
045F:  BSF    05.1
0460:  BCF    03.5
0461:  BTFSC  05.1
0462:  GOTO   498
0463:  BSF    03.5
0464:  BSF    05.2
0465:  BCF    03.5
0466:  BTFSC  05.2
0467:  GOTO   498
0468:  BSF    03.5
0469:  BSF    05.3
046A:  BCF    03.5
046B:  BTFSS  05.3
046C:  GOTO   498
....................       { 
....................          lcd_putc("\f"); 
046D:  CLRF   21
046E:  MOVF   21,W
046F:  CALL   00C
0470:  IORLW  00
0471:  BTFSC  03.2
0472:  GOTO   477
0473:  INCF   21,F
0474:  MOVWF  22
0475:  CALL   237
0476:  GOTO   46E
....................          lcd_gotoxy(1, 1); 
0477:  MOVLW  01
0478:  MOVWF  23
0479:  MOVWF  24
047A:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
047B:  CLRF   21
047C:  MOVF   21,W
047D:  CALL   027
047E:  INCF   21,F
047F:  MOVWF  77
0480:  MOVWF  22
0481:  CALL   237
0482:  MOVLW  08
0483:  SUBWF  21,W
0484:  BTFSS  03.2
0485:  GOTO   47C
....................          lcd_gotoxy(1, 2); 
0486:  MOVLW  01
0487:  MOVWF  23
0488:  MOVLW  02
0489:  MOVWF  24
048A:  CALL   225
....................          printf(lcd_putc, "ERROR_023: X7_VT_05"); 
048B:  CLRF   21
048C:  MOVF   21,W
048D:  CALL   0D9
048E:  INCF   21,F
048F:  MOVWF  77
0490:  MOVWF  22
0491:  CALL   237
0492:  MOVLW  13
0493:  SUBWF  21,W
0494:  BTFSS  03.2
0495:  GOTO   48C
....................          break; 
0496:  GOTO   612
....................       } 
0497:  GOTO   611
....................       else if (input(PIN_A0) == 1 && input(PIN_A1) == 0 && input(PIN_A2) == 0 && input(PIN_A3) == 1) 
0498:  BSF    03.5
0499:  BSF    05.0
049A:  BCF    03.5
049B:  BTFSS  05.0
049C:  GOTO   4D7
049D:  BSF    03.5
049E:  BSF    05.1
049F:  BCF    03.5
04A0:  BTFSC  05.1
04A1:  GOTO   4D7
04A2:  BSF    03.5
04A3:  BSF    05.2
04A4:  BCF    03.5
04A5:  BTFSC  05.2
04A6:  GOTO   4D7
04A7:  BSF    03.5
04A8:  BSF    05.3
04A9:  BCF    03.5
04AA:  BTFSS  05.3
04AB:  GOTO   4D7
....................       { 
....................          lcd_putc("\f"); 
04AC:  CLRF   21
04AD:  MOVF   21,W
04AE:  CALL   00C
04AF:  IORLW  00
04B0:  BTFSC  03.2
04B1:  GOTO   4B6
04B2:  INCF   21,F
04B3:  MOVWF  22
04B4:  CALL   237
04B5:  GOTO   4AD
....................          lcd_gotoxy(1, 1); 
04B6:  MOVLW  01
04B7:  MOVWF  23
04B8:  MOVWF  24
04B9:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
04BA:  CLRF   21
04BB:  MOVF   21,W
04BC:  CALL   027
04BD:  INCF   21,F
04BE:  MOVWF  77
04BF:  MOVWF  22
04C0:  CALL   237
04C1:  MOVLW  08
04C2:  SUBWF  21,W
04C3:  BTFSS  03.2
04C4:  GOTO   4BB
....................          lcd_gotoxy(1, 2); 
04C5:  MOVLW  01
04C6:  MOVWF  23
04C7:  MOVLW  02
04C8:  MOVWF  24
04C9:  CALL   225
....................          printf(lcd_putc, "ERROR_033: X6_VT_05"); 
04CA:  CLRF   21
04CB:  MOVF   21,W
04CC:  CALL   0F1
04CD:  INCF   21,F
04CE:  MOVWF  77
04CF:  MOVWF  22
04D0:  CALL   237
04D1:  MOVLW  13
04D2:  SUBWF  21,W
04D3:  BTFSS  03.2
04D4:  GOTO   4CB
....................          break; 
04D5:  GOTO   612
....................       } 
04D6:  GOTO   611
....................       //funcion de arduino lecturasEnBajadas6 
....................       else if (input(PIN_A0) == 0 && input(PIN_A1) == 1 && input(PIN_A2) == 0 && input(PIN_A3) == 1) 
04D7:  BSF    03.5
04D8:  BSF    05.0
04D9:  BCF    03.5
04DA:  BTFSC  05.0
04DB:  GOTO   516
04DC:  BSF    03.5
04DD:  BSF    05.1
04DE:  BCF    03.5
04DF:  BTFSS  05.1
04E0:  GOTO   516
04E1:  BSF    03.5
04E2:  BSF    05.2
04E3:  BCF    03.5
04E4:  BTFSC  05.2
04E5:  GOTO   516
04E6:  BSF    03.5
04E7:  BSF    05.3
04E8:  BCF    03.5
04E9:  BTFSS  05.3
04EA:  GOTO   516
....................       { 
....................          lcd_putc("\f"); 
04EB:  CLRF   21
04EC:  MOVF   21,W
04ED:  CALL   00C
04EE:  IORLW  00
04EF:  BTFSC  03.2
04F0:  GOTO   4F5
04F1:  INCF   21,F
04F2:  MOVWF  22
04F3:  CALL   237
04F4:  GOTO   4EC
....................          lcd_gotoxy(1, 1); 
04F5:  MOVLW  01
04F6:  MOVWF  23
04F7:  MOVWF  24
04F8:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
04F9:  CLRF   21
04FA:  MOVF   21,W
04FB:  CALL   027
04FC:  INCF   21,F
04FD:  MOVWF  77
04FE:  MOVWF  22
04FF:  CALL   237
0500:  MOVLW  08
0501:  SUBWF  21,W
0502:  BTFSS  03.2
0503:  GOTO   4FA
....................          lcd_gotoxy(1, 2); 
0504:  MOVLW  01
0505:  MOVWF  23
0506:  MOVLW  02
0507:  MOVWF  24
0508:  CALL   225
....................          printf(lcd_putc, "ERROR_014: X1_VT_6"); 
0509:  CLRF   21
050A:  MOVF   21,W
050B:  CALL   10C
050C:  INCF   21,F
050D:  MOVWF  77
050E:  MOVWF  22
050F:  CALL   237
0510:  MOVLW  12
0511:  SUBWF  21,W
0512:  BTFSS  03.2
0513:  GOTO   50A
....................          break; 
0514:  GOTO   612
....................       } 
0515:  GOTO   611
....................       else if (input(PIN_A0) == 1 && input(PIN_A1) == 1 && input(PIN_A2) == 0 && input(PIN_A3) == 1) 
0516:  BSF    03.5
0517:  BSF    05.0
0518:  BCF    03.5
0519:  BTFSS  05.0
051A:  GOTO   555
051B:  BSF    03.5
051C:  BSF    05.1
051D:  BCF    03.5
051E:  BTFSS  05.1
051F:  GOTO   555
0520:  BSF    03.5
0521:  BSF    05.2
0522:  BCF    03.5
0523:  BTFSC  05.2
0524:  GOTO   555
0525:  BSF    03.5
0526:  BSF    05.3
0527:  BCF    03.5
0528:  BTFSS  05.3
0529:  GOTO   555
....................       { 
....................          lcd_putc("\f"); 
052A:  CLRF   21
052B:  MOVF   21,W
052C:  CALL   00C
052D:  IORLW  00
052E:  BTFSC  03.2
052F:  GOTO   534
0530:  INCF   21,F
0531:  MOVWF  22
0532:  CALL   237
0533:  GOTO   52B
....................          lcd_gotoxy(1, 1); 
0534:  MOVLW  01
0535:  MOVWF  23
0536:  MOVWF  24
0537:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
0538:  CLRF   21
0539:  MOVF   21,W
053A:  CALL   027
053B:  INCF   21,F
053C:  MOVWF  77
053D:  MOVWF  22
053E:  CALL   237
053F:  MOVLW  08
0540:  SUBWF  21,W
0541:  BTFSS  03.2
0542:  GOTO   539
....................          lcd_gotoxy(1, 2); 
0543:  MOVLW  01
0544:  MOVWF  23
0545:  MOVLW  02
0546:  MOVWF  24
0547:  CALL   225
....................          printf(lcd_putc, "ERROR_024: X7_VT_6"); 
0548:  CLRF   21
0549:  MOVF   21,W
054A:  CALL   123
054B:  INCF   21,F
054C:  MOVWF  77
054D:  MOVWF  22
054E:  CALL   237
054F:  MOVLW  12
0550:  SUBWF  21,W
0551:  BTFSS  03.2
0552:  GOTO   549
....................          break; 
0553:  GOTO   612
....................       } 
0554:  GOTO   611
....................       else if (input(PIN_A0) == 0 && input(PIN_A1) == 0 && input(PIN_A2) == 1 && input(PIN_A3) == 1) 
0555:  BSF    03.5
0556:  BSF    05.0
0557:  BCF    03.5
0558:  BTFSC  05.0
0559:  GOTO   594
055A:  BSF    03.5
055B:  BSF    05.1
055C:  BCF    03.5
055D:  BTFSC  05.1
055E:  GOTO   594
055F:  BSF    03.5
0560:  BSF    05.2
0561:  BCF    03.5
0562:  BTFSS  05.2
0563:  GOTO   594
0564:  BSF    03.5
0565:  BSF    05.3
0566:  BCF    03.5
0567:  BTFSS  05.3
0568:  GOTO   594
....................       { 
....................          lcd_putc("\f"); 
0569:  CLRF   21
056A:  MOVF   21,W
056B:  CALL   00C
056C:  IORLW  00
056D:  BTFSC  03.2
056E:  GOTO   573
056F:  INCF   21,F
0570:  MOVWF  22
0571:  CALL   237
0572:  GOTO   56A
....................          lcd_gotoxy(1, 1); 
0573:  MOVLW  01
0574:  MOVWF  23
0575:  MOVWF  24
0576:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
0577:  CLRF   21
0578:  MOVF   21,W
0579:  CALL   027
057A:  INCF   21,F
057B:  MOVWF  77
057C:  MOVWF  22
057D:  CALL   237
057E:  MOVLW  08
057F:  SUBWF  21,W
0580:  BTFSS  03.2
0581:  GOTO   578
....................          lcd_gotoxy(1, 2); 
0582:  MOVLW  01
0583:  MOVWF  23
0584:  MOVLW  02
0585:  MOVWF  24
0586:  CALL   225
....................          printf(lcd_putc, "ERROR_034: X6_VT_6"); 
0587:  CLRF   21
0588:  MOVF   21,W
0589:  CALL   13A
058A:  INCF   21,F
058B:  MOVWF  77
058C:  MOVWF  22
058D:  CALL   237
058E:  MOVLW  12
058F:  SUBWF  21,W
0590:  BTFSS  03.2
0591:  GOTO   588
....................          break; 
0592:  GOTO   612
....................       } 
0593:  GOTO   611
....................       //el la preparacion 
....................       else if (input(PIN_A0) == 1 && input(PIN_A1) == 0 && input(PIN_A2) == 1 && input(PIN_A3) == 1) 
0594:  BSF    03.5
0595:  BSF    05.0
0596:  BCF    03.5
0597:  BTFSS  05.0
0598:  GOTO   5D3
0599:  BSF    03.5
059A:  BSF    05.1
059B:  BCF    03.5
059C:  BTFSC  05.1
059D:  GOTO   5D3
059E:  BSF    03.5
059F:  BSF    05.2
05A0:  BCF    03.5
05A1:  BTFSS  05.2
05A2:  GOTO   5D3
05A3:  BSF    03.5
05A4:  BSF    05.3
05A5:  BCF    03.5
05A6:  BTFSS  05.3
05A7:  GOTO   5D3
....................       { 
....................          lcd_putc("\f"); 
05A8:  CLRF   21
05A9:  MOVF   21,W
05AA:  CALL   00C
05AB:  IORLW  00
05AC:  BTFSC  03.2
05AD:  GOTO   5B2
05AE:  INCF   21,F
05AF:  MOVWF  22
05B0:  CALL   237
05B1:  GOTO   5A9
....................          lcd_gotoxy(1, 1); 
05B2:  MOVLW  01
05B3:  MOVWF  23
05B4:  MOVWF  24
05B5:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
05B6:  CLRF   21
05B7:  MOVF   21,W
05B8:  CALL   027
05B9:  INCF   21,F
05BA:  MOVWF  77
05BB:  MOVWF  22
05BC:  CALL   237
05BD:  MOVLW  08
05BE:  SUBWF  21,W
05BF:  BTFSS  03.2
05C0:  GOTO   5B7
....................          lcd_gotoxy(1, 2); 
05C1:  MOVLW  01
05C2:  MOVWF  23
05C3:  MOVLW  02
05C4:  MOVWF  24
05C5:  CALL   225
....................          printf(lcd_putc, "ERROR_001: Preparacion X1"); 
05C6:  CLRF   21
05C7:  MOVF   21,W
05C8:  CALL   151
05C9:  INCF   21,F
05CA:  MOVWF  77
05CB:  MOVWF  22
05CC:  CALL   237
05CD:  MOVLW  19
05CE:  SUBWF  21,W
05CF:  BTFSS  03.2
05D0:  GOTO   5C7
....................          break; 
05D1:  GOTO   612
....................       } 
05D2:  GOTO   611
....................       else if (input(PIN_A0) == 0 && input(PIN_A1) == 1 && input(PIN_A2) == 1 && input(PIN_A3) == 1) 
05D3:  BSF    03.5
05D4:  BSF    05.0
05D5:  BCF    03.5
05D6:  BTFSC  05.0
05D7:  GOTO   611
05D8:  BSF    03.5
05D9:  BSF    05.1
05DA:  BCF    03.5
05DB:  BTFSS  05.1
05DC:  GOTO   611
05DD:  BSF    03.5
05DE:  BSF    05.2
05DF:  BCF    03.5
05E0:  BTFSS  05.2
05E1:  GOTO   611
05E2:  BSF    03.5
05E3:  BSF    05.3
05E4:  BCF    03.5
05E5:  BTFSS  05.3
05E6:  GOTO   611
....................       { 
....................          lcd_putc("\f"); 
05E7:  CLRF   21
05E8:  MOVF   21,W
05E9:  CALL   00C
05EA:  IORLW  00
05EB:  BTFSC  03.2
05EC:  GOTO   5F1
05ED:  INCF   21,F
05EE:  MOVWF  22
05EF:  CALL   237
05F0:  GOTO   5E8
....................          lcd_gotoxy(1, 1); 
05F1:  MOVLW  01
05F2:  MOVWF  23
05F3:  MOVWF  24
05F4:  CALL   225
....................          printf(lcd_putc, "ERROR!!!"); 
05F5:  CLRF   21
05F6:  MOVF   21,W
05F7:  CALL   027
05F8:  INCF   21,F
05F9:  MOVWF  77
05FA:  MOVWF  22
05FB:  CALL   237
05FC:  MOVLW  08
05FD:  SUBWF  21,W
05FE:  BTFSS  03.2
05FF:  GOTO   5F6
....................          lcd_gotoxy(1, 2); 
0600:  MOVLW  01
0601:  MOVWF  23
0602:  MOVLW  02
0603:  MOVWF  24
0604:  CALL   225
....................          printf(lcd_putc, "ERROR_002: Preparacion X6"); 
0605:  CLRF   21
0606:  MOVF   21,W
0607:  CALL   16F
0608:  INCF   21,F
0609:  MOVWF  77
060A:  MOVWF  22
060B:  CALL   237
060C:  MOVLW  19
060D:  SUBWF  21,W
060E:  BTFSS  03.2
060F:  GOTO   606
....................          break; 
0610:  GOTO   612
....................       } 
....................    } while (true); 
0611:  GOTO   283
.................... } 
0612:  SLEEP

Configuration Fuses:
   Word  1: 3F11   NOWDT PUT INTRC NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
